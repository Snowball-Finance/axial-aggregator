{
  "language": "Solidity",
  "sources": {
    "contracts/adapters/BridgeMigrationAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\r\n//       ╞╬╬                                                                    ╬╠╬\r\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\r\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\r\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\r\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\r\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\r\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\r\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\r\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\r\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\r\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\r\n//                              \r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity >=0.7.0;\r\n\r\nimport \"../interface/IERC20.sol\";\r\nimport \"../lib/SafeERC20.sol\";\r\nimport \"../YakAdapter.sol\";\r\n\r\ncontract BridgeMigrationAdapter is YakAdapter {\r\n    using SafeERC20 for IERC20;\r\n\r\n    bytes32 public constant ID = keccak256('BridgeMigrationAdapter');\r\n    mapping(address => bool) public isNewBridgeToken;\r\n\r\n    constructor(\r\n        address[] memory _newTokens, \r\n        address[] memory _oldTokens,\r\n        uint _swapGasEstimate\r\n    ) {\r\n        setSwapGasEstimate(_swapGasEstimate);\r\n        setNewBridgeTokens(_newTokens, _oldTokens);\r\n    }\r\n\r\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal override {}\r\n\r\n    function _approveIfNeeded(address _newToken, address _oldToken) internal {\r\n        uint allowance = IERC20(_oldToken).allowance(address(this), _newToken);\r\n        if (allowance < UINT_MAX) {\r\n            IERC20(_oldToken).safeApprove(_newToken, UINT_MAX);\r\n        }\r\n    }\r\n\r\n    function _query(\r\n        uint _amountIn, \r\n        address _tokenIn, \r\n        address _tokenOut\r\n    ) internal override view returns (uint amountOut) {  \r\n        if (\r\n            isNewBridgeToken[_tokenOut]\r\n            && IERC20(_tokenOut).swapSupply(_tokenIn) >= _amountIn\r\n        ) {\r\n            amountOut = _amountIn;\r\n        }\r\n    }\r\n\r\n    function _swap(\r\n        uint _amountIn, \r\n        uint _amountOut, \r\n        address _tokenIn, \r\n        address _tokenOut, \r\n        address _to\r\n    ) internal override {\r\n        IERC20(_tokenOut).swap(_tokenIn, _amountIn);\r\n        _returnTo(_tokenOut, _amountOut, _to);\r\n    }\r\n\r\n    function setAllowances() public override {}\r\n\r\n    function setNewBridgeTokens(address[] memory _newTokens, address[] memory _oldTokens) public onlyOwner {\r\n        require(_newTokens.length == _oldTokens.length, 'BridgeMigrationAdapter: Needs to be surjective');\r\n        for (uint i; i<_newTokens.length; i++) {\r\n            require(IERC20(_newTokens[i]).swapSupply(_oldTokens[i]) > 0, 'BridgeMigrationAdapter: Invalid combination');\r\n            _approveIfNeeded(_newTokens[i], _oldTokens[i]);\r\n            isNewBridgeToken[_newTokens[i]] = true;\r\n        }\r\n    }\r\n}"
    },
    "contracts/interface/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address,address,uint);\r\n    event Transfer(address,address,uint);\r\n    function name() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function transferFrom(address,address,uint) external returns (bool);\r\n    function allowance(address,address) external view returns (uint);\r\n    function approve(address,uint) external returns (bool);\r\n    function transfer(address,uint) external returns (bool);\r\n    function balanceOf(address) external view returns (uint);\r\n    function nonces(address) external view returns (uint);  // Only tokens that support permit\r\n    function permit(address,address,uint256,uint256,uint8,bytes32,bytes32) external;  // Only tokens that support permit\r\n    function swap(address,uint256) external;  // Only Avalanche bridge tokens \r\n    function swapSupply(address) external view returns (uint);  // Only Avalanche bridge tokens \r\n}"
    },
    "contracts/lib/SafeERC20.sol": {
      "content": "// This is a simplified version of OpenZepplin's SafeERC20 library\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"../interface/IERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}"
    },
    "contracts/YakAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\r\n//       ╞╬╬                                                                    ╬╠╬\r\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\r\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\r\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\r\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\r\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\r\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\r\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\r\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\r\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\r\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\r\n//                              \r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity >=0.7.0;\r\n\r\nimport \"./interface/IERC20.sol\";\r\nimport \"./interface/IWETH.sol\";\r\nimport \"./lib/SafeERC20.sol\";\r\nimport \"./lib/Ownable.sol\";\r\n\r\nabstract contract YakAdapter is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    event YakAdapterSwap(\r\n        address indexed _tokenFrom, \r\n        address indexed _tokenTo, \r\n        uint _amountIn, \r\n        uint _amountOut\r\n    );\r\n\r\n    event UpdatedGasEstimate(\r\n        address indexed _adapter,\r\n        uint _newEstimate\r\n    );\r\n\r\n    event Recovered(\r\n        address indexed _asset, \r\n        uint amount\r\n    );\r\n\r\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\r\n    address internal constant AVAX = address(0);\r\n    uint internal constant UINT_MAX = type(uint).max;\r\n\r\n    uint public swapGasEstimate;\r\n    string public name;\r\n\r\n    function setSwapGasEstimate(uint _estimate) public onlyOwner {\r\n        swapGasEstimate = _estimate;\r\n        emit UpdatedGasEstimate(address(this), _estimate);\r\n    }\r\n\r\n    /**\r\n     * @notice Revoke token allowance\r\n     * @param _token address\r\n     * @param _spender address\r\n     */\r\n    function revokeAllowance(address _token, address _spender) external onlyOwner {\r\n        IERC20(_token).safeApprove(_spender, 0);\r\n    }\r\n\r\n    /**\r\n     * @notice Recover ERC20 from contract\r\n     * @param _tokenAddress token address\r\n     * @param _tokenAmount amount to recover\r\n     */\r\n    function recoverERC20(address _tokenAddress, uint _tokenAmount) external onlyOwner {\r\n        require(_tokenAmount > 0, 'YakAdapter: Nothing to recover');\r\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\r\n        emit Recovered(_tokenAddress, _tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Recover AVAX from contract\r\n     * @param _amount amount\r\n     */\r\n    function recoverAVAX(uint _amount) external onlyOwner {\r\n        require(_amount > 0, 'YakAdapter: Nothing to recover');\r\n        payable(msg.sender).transfer(_amount);\r\n        emit Recovered(address(0), _amount);\r\n    }\r\n\r\n    function query(\r\n        uint _amountIn, \r\n        address _tokenIn, \r\n        address _tokenOut\r\n    ) external view returns (uint) {\r\n        return _query(\r\n            _amountIn, \r\n            _tokenIn, \r\n            _tokenOut\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Execute a swap from token to token assuming this contract already holds input tokens\r\n     * @notice Interact through the router\r\n     * @param _amountIn input amount in starting token\r\n     * @param _amountOut amount out in ending token\r\n     * @param _fromToken ERC20 token being sold\r\n     * @param _toToken ERC20 token being bought\r\n     * @param _to address where swapped funds should be sent to\r\n     */\r\n    function swap(\r\n        uint _amountIn, \r\n        uint _amountOut,\r\n        address _fromToken, \r\n        address _toToken, \r\n        address _to\r\n    ) external {\r\n        _approveIfNeeded(_fromToken, _amountIn);\r\n        _swap(_amountIn, _amountOut, _fromToken, _toToken, _to);\r\n        emit YakAdapterSwap(\r\n            _fromToken, \r\n            _toToken,\r\n            _amountIn, \r\n            _amountOut \r\n        );\r\n    } \r\n\r\n    /**\r\n     * @notice Return expected funds to user\r\n     * @dev Skip if funds should stay in the contract\r\n     * @param _token address\r\n     * @param _amount tokens to return\r\n     * @param _to address where funds should be sent to\r\n     */\r\n    function _returnTo(address _token, uint _amount, address _to) internal {\r\n        if (address(this)!=_to) {\r\n            IERC20(_token).safeTransfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Wrap AVAX\r\n     * @param _amount amount\r\n     */\r\n    function _wrap(uint _amount) internal {\r\n        IWETH(WAVAX).deposit{value: _amount}();\r\n    }\r\n\r\n    /**\r\n     * @notice Unwrap WAVAX\r\n     * @param _amount amount\r\n     */\r\n    function _unwrap(uint _amount) internal {\r\n        IWETH(WAVAX).withdraw(_amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Internal implementation of a swap\r\n     * @dev Must return tokens to address(this)\r\n     * @dev Wrapping is handled external to this function\r\n     * @param _amountIn amount being sold\r\n     * @param _amountOut amount being bought\r\n     * @param _fromToken ERC20 token being sold\r\n     * @param _toToken ERC20 token being bought\r\n     * @param _to Where recieved tokens are sent to\r\n     */\r\n    function _swap(\r\n        uint _amountIn, \r\n        uint _amountOut, \r\n        address _fromToken, \r\n        address _toToken, \r\n        address _to\r\n    ) internal virtual;\r\n\r\n    function _query(\r\n        uint _amountIn,\r\n        address _tokenIn, \r\n        address _tokenOut\r\n    ) internal virtual view returns (uint);\r\n\r\n    /**\r\n     * @notice Approve tokens for use in Strategy\r\n     * @dev Should use modifier `onlyOwner` to avoid griefing\r\n     */\r\n    function setAllowances() public virtual;\r\n\r\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal virtual;\r\n\r\n    receive() external payable {}\r\n}"
    },
    "contracts/lib/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'SafeMath: ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'SafeMath: ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'SafeMath: ds-math-mul-overflow');\r\n    }\r\n}"
    },
    "contracts/interface/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\ninterface IWETH is IERC20 {\r\n    function withdraw(uint256 amount) external;\r\n    function deposit() external payable;\r\n}"
    },
    "contracts/lib/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.7.0;\r\n\r\nimport \"./Context.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: New owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n"
    },
    "contracts/lib/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n"
    },
    "contracts/adapters/XJoeAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\r\n//       ╞╬╬                                                                    ╬╠╬\r\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\r\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\r\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\r\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\r\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\r\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\r\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\r\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\r\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\r\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\r\n//     \r\n//     \r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity >=0.7.0;\r\n\r\nimport \"../interface/IxJOE.sol\";\r\nimport \"../lib/SafeERC20.sol\";\r\nimport \"../lib/SafeMath.sol\";\r\nimport \"../YakAdapter.sol\";\r\n\r\ncontract XJoeAdapter is YakAdapter {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n\r\n    bytes32 public constant ID = keccak256('XJoeAdapter');\r\n    address public constant JOE = 0x6e84a6216eA6dACC71eE8E6b0a5B7322EEbC0fDd;\r\n    address public constant XJOE = 0x57319d41F71E81F3c65F2a47CA4e001EbAFd4F33;\r\n\r\n    constructor(uint _swapGasEstimate) {\r\n        name = 'XJoeAdapter';\r\n        setSwapGasEstimate(_swapGasEstimate);\r\n        setAllowances();\r\n    }\r\n\r\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal override {}\r\n\r\n    function queryEnter(uint _amountIn) internal view returns (uint) {\r\n        uint totalJoe = IERC20(JOE).balanceOf(XJOE);\r\n        uint totalShares = IxJOE(XJOE).totalSupply();\r\n        if (totalShares == 0 || totalJoe == 0) {\r\n            return _amountIn;\r\n        }\r\n        return _amountIn.mul(totalShares) / totalJoe;\r\n    }\r\n\r\n    function queryLeave(uint _amountIn) internal view returns (uint) {\r\n        uint totalShares = IxJOE(XJOE).totalSupply();\r\n        return _amountIn.mul(IERC20(JOE).balanceOf(XJOE)) / totalShares;\r\n    }\r\n\r\n    function _query(\r\n        uint _amountIn, \r\n        address _tokenIn, \r\n        address _tokenOut\r\n    ) internal override view returns (uint amountOut) {  \r\n        if (_tokenIn == JOE && _tokenOut == XJOE) {\r\n            return queryEnter(_amountIn);\r\n        } else if (_tokenIn == XJOE && _tokenOut == JOE) {\r\n            return queryLeave(_amountIn);\r\n        }\r\n    }\r\n\r\n    function _swap(\r\n        uint _amountIn, \r\n        uint _amountOut, \r\n        address _tokenIn, \r\n        address _tokenOut, \r\n        address _to\r\n    ) internal override {\r\n        if (_tokenIn == JOE && _tokenOut == XJOE) {\r\n            IxJOE(XJOE).enter(_amountIn);\r\n        } else if (_tokenIn == XJOE && _tokenOut == JOE) {\r\n            IxJOE(XJOE).leave(_amountIn);\r\n        } else {\r\n            revert(\"XJoeAdapter: Unsupported token\");\r\n        }\r\n        // Confidently transfer amount-out\r\n        _returnTo(_tokenOut, _amountOut, _to);\r\n    }\r\n\r\n    function setAllowances() public override {\r\n        // Approve max xJOE and JOE for xJOE\r\n        IERC20(XJOE).safeApprove(XJOE, UINT_MAX);\r\n        IERC20(JOE).safeApprove(XJOE, UINT_MAX);\r\n    }\r\n\r\n}"
    },
    "contracts/interface/IxJOE.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0;\r\n\r\ninterface IxJOE {\r\n    function leave(uint) external;\r\n    function enter(uint) external;\r\n    function totalSupply() external view returns (uint);\r\n}"
    },
    "contracts/AxialRouter.sol": {
      "content": "\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity >=0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"./lib/BytesManipulation.sol\";\r\nimport \"./interface/IAdapter.sol\";\r\nimport \"./interface/IERC20.sol\";\r\nimport \"./interface/IWETH.sol\";\r\nimport \"./lib/SafeMath.sol\";\r\nimport \"./lib/SafeERC20.sol\";\r\nimport \"./lib/Ownable.sol\";\r\n\r\ncontract AxialRouter is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n\r\n    address public constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\r\n    address public constant AVAX = address(0);\r\n    string public constant NAME = 'AxialRouter';\r\n    uint public constant FEE_DENOMINATOR = 1e4;\r\n    uint public MIN_FEE = 0;\r\n    address public FEE_CLAIMER;\r\n    address[] public TRUSTED_TOKENS;\r\n    address[] public ADAPTERS;\r\n\r\n    event Recovered(\r\n        address indexed _asset, \r\n        uint amount\r\n    );\r\n\r\n    event UpdatedTrustedTokens(\r\n\t    address[] _newTrustedTokens\r\n    );\r\n\r\n    event UpdatedAdapters(\r\n        address[] _newAdapters\r\n    );\r\n\r\n    event UpdatedMinFee(\r\n        uint _oldMinFee,\r\n        uint _newMinFee\r\n    );\r\n\r\n    event UpdatedFeeClaimer(\r\n        address _oldFeeClaimer, \r\n        address _newFeeClaimer \r\n    );\r\n\r\n    event AxialSwap(\r\n        address indexed _tokenIn, \r\n        address indexed _tokenOut, \r\n        uint _amountIn, \r\n        uint _amountOut\r\n    );\r\n\r\n    struct Query {\r\n        address adapter;\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint256 amountOut;\r\n    }\r\n\r\n    struct OfferWithGas {\r\n        bytes amounts;\r\n        bytes adapters;\r\n        bytes path;\r\n        uint gasEstimate;\r\n    }\r\n\r\n    struct Offer {\r\n        bytes amounts;\r\n        bytes adapters;\r\n        bytes path;\r\n    }\r\n\r\n    struct FormattedOfferWithGas {\r\n        uint[] amounts;\r\n        address[] adapters;\r\n        address[] path;\r\n        uint gasEstimate;\r\n    }\r\n\r\n    struct FormattedOffer {\r\n        uint[] amounts;\r\n        address[] adapters;\r\n        address[] path;\r\n    }\r\n\r\n    struct Trade {\r\n        uint amountIn;\r\n        uint amountOut;\r\n        address[] path;\r\n        address[] adapters;\r\n    }\r\n\r\n    constructor(\r\n        address[] memory _adapters, \r\n        address[] memory _trustedTokens, \r\n        address _feeClaimer\r\n    ) {\r\n        setTrustedTokens(_trustedTokens);\r\n        setFeeClaimer(_feeClaimer);\r\n        setAdapters(_adapters);\r\n        _setAllowances();\r\n    }\r\n\r\n    // -- SETTERS --\r\n\r\n    function _setAllowances() internal {\r\n        IERC20(WAVAX).safeApprove(WAVAX, type(uint).max);\r\n    }\r\n\r\n    function setTrustedTokens(address[] memory _trustedTokens) public onlyOwner {\r\n        emit UpdatedTrustedTokens(_trustedTokens);\r\n        TRUSTED_TOKENS = _trustedTokens;\r\n    }\r\n\r\n    function setAdapters(address[] memory _adapters) public onlyOwner {\r\n        emit UpdatedAdapters(_adapters);\r\n        ADAPTERS = _adapters;\r\n    }\r\n\r\n    function setMinFee(uint _fee) external onlyOwner {\r\n        emit UpdatedMinFee(MIN_FEE, _fee);\r\n        MIN_FEE = _fee;\r\n    }\r\n\r\n    function setFeeClaimer(address _claimer) public onlyOwner {\r\n        emit UpdatedFeeClaimer(FEE_CLAIMER, _claimer);\r\n        FEE_CLAIMER = _claimer;\r\n    }\r\n\r\n    //  -- GENERAL --\r\n\r\n    function trustedTokensCount() external view returns (uint) {\r\n        return TRUSTED_TOKENS.length;\r\n    }\r\n\r\n    function adaptersCount() external view returns (uint) {\r\n        return ADAPTERS.length;\r\n    }\r\n\r\n    function recoverERC20(address _tokenAddress, uint _tokenAmount) external onlyOwner {\r\n        require(_tokenAmount > 0, 'AxialRouter: Nothing to recover');\r\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\r\n        emit Recovered(_tokenAddress, _tokenAmount);\r\n    }\r\n\r\n    function recoverAVAX(uint _amount) external onlyOwner {\r\n        require(_amount > 0, 'AxialRouter: Nothing to recover');\r\n        payable(msg.sender).transfer(_amount);\r\n        emit Recovered(address(0), _amount);\r\n    }\r\n\r\n    // Fallback\r\n    receive() external payable {}\r\n\r\n\r\n    // -- HELPERS -- \r\n\r\n    function _applyFee(uint _amountIn, uint _fee) internal view returns (uint) {\r\n        require(_fee>=MIN_FEE, 'AxialRouter: Insufficient fee');\r\n        return _amountIn.mul(FEE_DENOMINATOR.sub(_fee))/FEE_DENOMINATOR;\r\n    }\r\n\r\n    function _wrap(uint _amount) internal {\r\n        IWETH(WAVAX).deposit{value: _amount}();\r\n    }\r\n\r\n    function _unwrap(uint _amount) internal {\r\n        IWETH(WAVAX).withdraw(_amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Return tokens to user\r\n     * @dev Pass address(0) for AVAX\r\n     * @param _token address\r\n     * @param _amount tokens to return\r\n     * @param _to address where funds should be sent to\r\n     */\r\n    function _returnTokensTo(address _token, uint _amount, address _to) internal {\r\n        if (address(this)!=_to) {\r\n            if (_token == AVAX) {\r\n                payable(_to).transfer(_amount);\r\n            } else {\r\n                IERC20(_token).safeTransfer(_to, _amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Makes a deep copy of Offer struct\r\n     */\r\n    function _cloneOffer(\r\n        Offer memory _queries\r\n    ) internal pure returns (Offer memory) {\r\n        return Offer(\r\n            _queries.amounts, \r\n            _queries.adapters, \r\n            _queries.path\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Makes a deep copy of OfferWithGas struct\r\n     */\r\n    function _cloneOfferWithGas(\r\n        OfferWithGas memory _queries\r\n    ) internal pure returns (OfferWithGas memory) {\r\n        return OfferWithGas(\r\n            _queries.amounts, \r\n            _queries.adapters, \r\n            _queries.path, \r\n            _queries.gasEstimate\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Appends Query elements to Offer struct\r\n     */\r\n    function _addQuery(\r\n        Offer memory _queries, \r\n        uint256 _amount, \r\n        address _adapter, \r\n        address _tokenOut\r\n    ) internal pure {\r\n        _queries.path = BytesManipulation.mergeBytes(_queries.path, BytesManipulation.toBytes(_tokenOut));\r\n        _queries.amounts = BytesManipulation.mergeBytes(_queries.amounts, BytesManipulation.toBytes(_amount));\r\n        _queries.adapters = BytesManipulation.mergeBytes(_queries.adapters, BytesManipulation.toBytes(_adapter));\r\n    }\r\n\r\n    /**\r\n     * Appends Query elements to Offer struct\r\n     */\r\n    function _addQueryWithGas(\r\n        OfferWithGas memory _queries, \r\n        uint256 _amount, \r\n        address _adapter, \r\n        address _tokenOut, \r\n        uint _gasEstimate\r\n    ) internal pure {\r\n        _queries.path = BytesManipulation.mergeBytes(_queries.path, BytesManipulation.toBytes(_tokenOut));\r\n        _queries.amounts = BytesManipulation.mergeBytes(_queries.amounts, BytesManipulation.toBytes(_amount));\r\n        _queries.adapters = BytesManipulation.mergeBytes(_queries.adapters, BytesManipulation.toBytes(_adapter));\r\n        _queries.gasEstimate += _gasEstimate;\r\n    }\r\n\r\n    /**\r\n     * Converts byte-arrays to an array of integers\r\n     */\r\n    function _formatAmounts(bytes memory _amounts) internal pure returns (uint256[] memory) {\r\n        // Format amounts\r\n        uint256 chunks = _amounts.length / 32;\r\n        uint256[] memory amountsFormatted = new uint256[](chunks);\r\n        for (uint256 i=0; i<chunks; i++) {\r\n            amountsFormatted[i] = BytesManipulation.bytesToUint256(i*32+32, _amounts);\r\n        }\r\n        return amountsFormatted;\r\n    }\r\n\r\n    /**\r\n     * Converts byte-array to an array of addresses\r\n     */\r\n    function _formatAddresses(bytes memory _addresses) internal pure returns (address[] memory) {\r\n        uint256 chunks = _addresses.length / 32;\r\n        address[] memory addressesFormatted = new address[](chunks);\r\n        for (uint256 i=0; i<chunks; i++) {\r\n            addressesFormatted[i] = BytesManipulation.bytesToAddress(i*32+32, _addresses);\r\n        }\r\n        return addressesFormatted;\r\n    }\r\n\r\n    /**\r\n     * Formats elements in the Offer object from byte-arrays to integers and addresses\r\n     */\r\n    function _formatOffer(Offer memory _queries) internal pure returns (FormattedOffer memory) {\r\n        return FormattedOffer(\r\n            _formatAmounts(_queries.amounts), \r\n            _formatAddresses(_queries.adapters), \r\n            _formatAddresses(_queries.path)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Formats elements in the Offer object from byte-arrays to integers and addresses\r\n     */\r\n    function _formatOfferWithGas(OfferWithGas memory _queries) internal pure returns (FormattedOfferWithGas memory) {\r\n        return FormattedOfferWithGas(\r\n            _formatAmounts(_queries.amounts), \r\n            _formatAddresses(_queries.adapters), \r\n            _formatAddresses(_queries.path), \r\n            _queries.gasEstimate\r\n        );\r\n    }\r\n\r\n\r\n    // -- QUERIES --\r\n\r\n\r\n    /**\r\n     * Query single adapter\r\n     */\r\n    function queryAdapter(\r\n        uint256 _amountIn, \r\n        address _tokenIn, \r\n        address _tokenOut,\r\n        uint8 _index\r\n    ) external view returns (uint256) {\r\n        IAdapter _adapter = IAdapter(ADAPTERS[_index]);\r\n        uint amountOut = _adapter.query(_amountIn, _tokenIn, _tokenOut);\r\n        return amountOut;\r\n    }\r\n\r\n    /**\r\n     * Query specified adapters\r\n     */\r\n    function queryNoSplit(\r\n        uint256 _amountIn, \r\n        address _tokenIn, \r\n        address _tokenOut,\r\n        uint8[] calldata _options\r\n    ) public view returns (Query memory) {\r\n        Query memory bestQuery;\r\n        for (uint8 i; i<_options.length; i++) {\r\n            address _adapter = ADAPTERS[_options[i]];\r\n            uint amountOut = IAdapter(_adapter).query(\r\n                _amountIn, \r\n                _tokenIn, \r\n                _tokenOut\r\n            );\r\n            if (i==0 || amountOut>bestQuery.amountOut) {\r\n                bestQuery = Query(_adapter, _tokenIn, _tokenOut, amountOut);\r\n            }\r\n        }\r\n        return bestQuery;\r\n    }\r\n\r\n    /**\r\n     * Query all adapters\r\n     */\r\n    function queryNoSplit(\r\n        uint256 _amountIn, \r\n        address _tokenIn, \r\n        address _tokenOut\r\n    ) public view returns (Query memory) {\r\n        Query memory bestQuery;\r\n        for (uint8 i; i<ADAPTERS.length; i++) {\r\n            address _adapter = ADAPTERS[i];\r\n            uint amountOut = IAdapter(_adapter).query(\r\n                _amountIn, \r\n                _tokenIn, \r\n                _tokenOut\r\n            );\r\n            if (i==0 || amountOut>bestQuery.amountOut) {\r\n                bestQuery = Query(_adapter, _tokenIn, _tokenOut, amountOut);\r\n            }\r\n        }\r\n        return bestQuery;\r\n    }\r\n\r\n    /**\r\n     * Return path with best returns between two tokens\r\n     * Takes gas-cost into account\r\n     */\r\n    function findBestPathWithGas(\r\n        uint256 _amountIn, \r\n        address _tokenIn, \r\n        address _tokenOut, \r\n        uint _maxSteps,\r\n        uint _gasPrice\r\n    ) external view returns (FormattedOfferWithGas memory) {\r\n        require(_maxSteps>0 && _maxSteps<5, 'AxialRouter: Invalid max-steps');\r\n        OfferWithGas memory queries;\r\n        queries.amounts = BytesManipulation.toBytes(_amountIn);\r\n        queries.path = BytesManipulation.toBytes(_tokenIn);\r\n        // Find the market price between AVAX and token-out and express gas price in token-out currency\r\n        FormattedOffer memory gasQuery = findBestPath(1e18, WAVAX, _tokenOut, 2);  // Avoid low-liquidity price appreciation\r\n        // Leave result nWei to preserve digits for assets with low decimal places\r\n        uint tknOutPriceNwei = gasQuery.amounts[gasQuery.amounts.length-1].mul(_gasPrice/1e9);\r\n        queries = _findBestPathWithGas(\r\n            _amountIn, \r\n            _tokenIn, \r\n            _tokenOut, \r\n            _maxSteps,\r\n            queries, \r\n            tknOutPriceNwei\r\n        );\r\n        // If no paths are found return empty struct\r\n        if (queries.adapters.length==0) {\r\n            queries.amounts = '';\r\n            queries.path = '';\r\n        }\r\n        return _formatOfferWithGas(queries);\r\n    } \r\n\r\n    function _findBestPathWithGas(\r\n        uint256 _amountIn, \r\n        address _tokenIn, \r\n        address _tokenOut, \r\n        uint _maxSteps,\r\n        OfferWithGas memory _queries, \r\n        uint _tknOutPriceNwei\r\n    ) internal view returns (OfferWithGas memory) {\r\n        OfferWithGas memory bestOption = _cloneOfferWithGas(_queries);\r\n        uint256 bestAmountOut;\r\n        // First check if there is a path directly from tokenIn to tokenOut\r\n        Query memory queryDirect = queryNoSplit(_amountIn, _tokenIn, _tokenOut);\r\n        if (queryDirect.amountOut!=0) {\r\n            uint gasEstimate = IAdapter(queryDirect.adapter).swapGasEstimate();\r\n            _addQueryWithGas(\r\n                bestOption, \r\n                queryDirect.amountOut, \r\n                queryDirect.adapter, \r\n                queryDirect.tokenOut, \r\n                gasEstimate\r\n            );\r\n            bestAmountOut = queryDirect.amountOut;\r\n        }\r\n        // Only check the rest if they would go beyond step limit (Need at least 2 more steps)\r\n        if (_maxSteps>1 && _queries.adapters.length/32<=_maxSteps-2) {\r\n            // Check for paths that pass through trusted tokens\r\n            for (uint256 i=0; i<TRUSTED_TOKENS.length; i++) {\r\n                if (_tokenIn == TRUSTED_TOKENS[i]) {\r\n                    continue;\r\n                }\r\n                // Loop through all adapters to find the best one for swapping tokenIn for one of the trusted tokens\r\n                Query memory bestSwap = queryNoSplit(_amountIn, _tokenIn, TRUSTED_TOKENS[i]);\r\n                if (bestSwap.amountOut==0) {\r\n                    continue;\r\n                }\r\n                // Explore options that connect the current path to the tokenOut\r\n                OfferWithGas memory newOffer = _cloneOfferWithGas(_queries);\r\n                uint gasEstimate = IAdapter(bestSwap.adapter).swapGasEstimate();\r\n                _addQueryWithGas(newOffer, bestSwap.amountOut, bestSwap.adapter, bestSwap.tokenOut, gasEstimate);\r\n                newOffer = _findBestPathWithGas(\r\n                    bestSwap.amountOut, \r\n                    TRUSTED_TOKENS[i], \r\n                    _tokenOut, \r\n                    _maxSteps, \r\n                    newOffer, \r\n                    _tknOutPriceNwei\r\n                );\r\n                address tokenOut = BytesManipulation.bytesToAddress(newOffer.path.length, newOffer.path);\r\n                uint256 amountOut = BytesManipulation.bytesToUint256(newOffer.amounts.length, newOffer.amounts);\r\n                // Check that the last token in the path is the tokenOut and update the new best option if neccesary\r\n                if (_tokenOut == tokenOut && amountOut > bestAmountOut) {\r\n                    if (newOffer.gasEstimate > bestOption.gasEstimate) {\r\n                        uint gasCostDiff = _tknOutPriceNwei.mul(newOffer.gasEstimate-bestOption.gasEstimate) / 1e9;\r\n                        uint priceDiff = amountOut - bestAmountOut;\r\n                        if (gasCostDiff > priceDiff) { continue; }\r\n                    }\r\n                    bestAmountOut = amountOut;\r\n                    bestOption = newOffer;\r\n                }\r\n            }\r\n        }\r\n        return bestOption;   \r\n    }\r\n\r\n    /**\r\n     * Return path with best returns between two tokens\r\n     */\r\n    function findBestPath(\r\n        uint256 _amountIn, \r\n        address _tokenIn, \r\n        address _tokenOut, \r\n        uint _maxSteps\r\n    ) public view returns (FormattedOffer memory) {\r\n        require(_maxSteps>0 && _maxSteps<5, 'AxialRouter: Invalid max-steps');\r\n        Offer memory queries;\r\n        queries.amounts = BytesManipulation.toBytes(_amountIn);\r\n        queries.path = BytesManipulation.toBytes(_tokenIn);\r\n        queries = _findBestPath(_amountIn, _tokenIn, _tokenOut, _maxSteps, queries);\r\n        // If no paths are found return empty struct\r\n        if (queries.adapters.length==0) {\r\n            queries.amounts = '';\r\n            queries.path = '';\r\n        }\r\n        return _formatOffer(queries);\r\n    } \r\n\r\n    function _findBestPath(\r\n        uint256 _amountIn, \r\n        address _tokenIn, \r\n        address _tokenOut, \r\n        uint _maxSteps,\r\n        Offer memory _queries\r\n    ) internal view returns (Offer memory) {\r\n        Offer memory bestOption = _cloneOffer(_queries);\r\n        uint256 bestAmountOut;\r\n        // First check if there is a path directly from tokenIn to tokenOut\r\n        Query memory queryDirect = queryNoSplit(_amountIn, _tokenIn, _tokenOut);\r\n        if (queryDirect.amountOut!=0) {\r\n            _addQuery(bestOption, queryDirect.amountOut, queryDirect.adapter, queryDirect.tokenOut);\r\n            bestAmountOut = queryDirect.amountOut;\r\n        }\r\n        // Only check the rest if they would go beyond step limit (Need at least 2 more steps)\r\n        if (_maxSteps>1 && _queries.adapters.length/32<=_maxSteps-2) {\r\n            // Check for paths that pass through trusted tokens\r\n            for (uint256 i=0; i<TRUSTED_TOKENS.length; i++) {\r\n                if (_tokenIn == TRUSTED_TOKENS[i]) {\r\n                    continue;\r\n                }\r\n                // Loop through all adapters to find the best one for swapping tokenIn for one of the trusted tokens\r\n                Query memory bestSwap = queryNoSplit(_amountIn, _tokenIn, TRUSTED_TOKENS[i]);\r\n                if (bestSwap.amountOut==0) {\r\n                    continue;\r\n                }\r\n                // Explore options that connect the current path to the tokenOut\r\n                Offer memory newOffer = _cloneOffer(_queries);\r\n                _addQuery(newOffer, bestSwap.amountOut, bestSwap.adapter, bestSwap.tokenOut);\r\n                newOffer = _findBestPath(\r\n                    bestSwap.amountOut, \r\n                    TRUSTED_TOKENS[i], \r\n                    _tokenOut, \r\n                    _maxSteps,\r\n                    newOffer\r\n                );  // Recursive step\r\n                address tokenOut = BytesManipulation.bytesToAddress(newOffer.path.length, newOffer.path);\r\n                uint256 amountOut = BytesManipulation.bytesToUint256(newOffer.amounts.length, newOffer.amounts);\r\n                // Check that the last token in the path is the tokenOut and update the new best option if neccesary\r\n                if (_tokenOut == tokenOut && amountOut>bestAmountOut) {\r\n                    bestAmountOut = amountOut;\r\n                    bestOption = newOffer;\r\n                }\r\n            }\r\n        }\r\n        return bestOption;   \r\n    }\r\n\r\n\r\n    // -- SWAPPERS --\r\n\r\n    function _swapNoSplit(\r\n        Trade calldata _trade,\r\n        address _from,\r\n        address _to, \r\n        uint _fee\r\n    ) internal returns (uint) {\r\n        uint[] memory amounts = new uint[](_trade.path.length);\r\n        if (_fee > 0 || MIN_FEE > 0) {\r\n            // Transfer fees to the claimer account and decrease initial amount\r\n            amounts[0] = _applyFee(_trade.amountIn, _fee);\r\n            IERC20(_trade.path[0]).safeTransferFrom(\r\n                _from, \r\n                FEE_CLAIMER, \r\n                _trade.amountIn.sub(amounts[0])\r\n            );\r\n        } else {\r\n            amounts[0] = _trade.amountIn;\r\n        }\r\n        IERC20(_trade.path[0]).safeTransferFrom(\r\n            _from, \r\n            _trade.adapters[0], \r\n            amounts[0]\r\n        );\r\n        // Get amounts that will be swapped\r\n        for (uint i=0; i<_trade.adapters.length; i++) {\r\n            amounts[i+1] = IAdapter(_trade.adapters[i]).query(\r\n                amounts[i], \r\n                _trade.path[i], \r\n                _trade.path[i+1]\r\n            );\r\n        }\r\n        require(amounts[amounts.length-1] >= _trade.amountOut, 'AxialRouter: Insufficient output amount');\r\n        for (uint256 i=0; i<_trade.adapters.length; i++) {\r\n            // All adapters should transfer output token to the following target\r\n            // All targets are the adapters, expect for the last swap where tokens are sent out\r\n            address targetAddress = i<_trade.adapters.length-1 ? _trade.adapters[i+1] : _to;\r\n            IAdapter(_trade.adapters[i]).swap(\r\n                amounts[i], \r\n                amounts[i+1], \r\n                _trade.path[i], \r\n                _trade.path[i+1],\r\n                targetAddress\r\n            );\r\n        }\r\n        emit AxialSwap(\r\n            _trade.path[0], \r\n            _trade.path[_trade.path.length-1], \r\n            _trade.amountIn, \r\n            amounts[amounts.length-1]\r\n        );\r\n        return amounts[amounts.length-1];\r\n    }\r\n\r\n    function swapNoSplit(\r\n        Trade calldata _trade,\r\n        address _to,\r\n        uint _fee\r\n    ) public {\r\n        _swapNoSplit(_trade, msg.sender, _to, _fee);\r\n    }\r\n\r\n    function swapNoSplitFromAVAX(\r\n        Trade calldata _trade,\r\n        address _to,\r\n        uint _fee\r\n    ) external payable {\r\n        require(_trade.path[0]==WAVAX, 'AxialRouter: Path needs to begin with WAVAX');\r\n        _wrap(_trade.amountIn);\r\n        _swapNoSplit(_trade, address(this), _to, _fee);\r\n    }\r\n\r\n    function swapNoSplitToAVAX(\r\n        Trade calldata _trade,\r\n        address _to,\r\n        uint _fee\r\n    ) public {\r\n        require(_trade.path[_trade.path.length-1]==WAVAX, 'AxialRouter: Path needs to end with WAVAX');\r\n        uint returnAmount = _swapNoSplit(_trade, msg.sender, address(this), _fee);\r\n        _unwrap(returnAmount);\r\n        _returnTokensTo(AVAX, returnAmount, _to);\r\n    }\r\n\r\n    /**\r\n     * Swap token to token without the need to approve the first token\r\n     */\r\n    function swapNoSplitWithPermit(\r\n        Trade calldata _trade,\r\n        address _to,\r\n        uint _fee,\r\n        uint _deadline, \r\n        uint8 _v,\r\n        bytes32 _r, \r\n        bytes32 _s\r\n    ) external {\r\n        IERC20(_trade.path[0]).permit(\r\n            msg.sender, \r\n            address(this), \r\n            _trade.amountIn, \r\n            _deadline, \r\n            _v, \r\n            _r, \r\n            _s\r\n        );\r\n        swapNoSplit(_trade, _to, _fee);\r\n    } \r\n\r\n    /**\r\n     * Swap token to AVAX without the need to approve the first token\r\n     */\r\n    function swapNoSplitToAVAXWithPermit(\r\n        Trade calldata _trade,\r\n        address _to,\r\n        uint _fee,\r\n        uint _deadline, \r\n        uint8 _v,\r\n        bytes32 _r, \r\n        bytes32 _s\r\n    ) external {\r\n        IERC20(_trade.path[0]).permit(\r\n            msg.sender, \r\n            address(this), \r\n            _trade.amountIn, \r\n            _deadline, \r\n            _v, \r\n            _r, \r\n            _s\r\n        );\r\n        swapNoSplitToAVAX(_trade, _to, _fee);\r\n    }\r\n\r\n}"
    },
    "contracts/lib/BytesManipulation.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0;\r\n\r\nimport \"./BytesToTypes.sol\";\r\n\r\nlibrary BytesManipulation {\r\n\r\n    function toBytes(uint256 x) internal pure returns (bytes memory b) {\r\n        b = new bytes(32);\r\n        assembly { mstore(add(b, 32), x) }\r\n    }\r\n\r\n    function toBytes(address x) internal pure returns (bytes memory b) {\r\n        b = new bytes(32);\r\n        assembly { mstore(add(b, 32), x) }\r\n    }\r\n\r\n    function mergeBytes(bytes memory a, bytes memory b) public pure returns (bytes memory c) {\r\n        // From https://ethereum.stackexchange.com/a/40456\r\n        uint alen = a.length;\r\n        uint totallen = alen + b.length;\r\n        uint loopsa = (a.length + 31) / 32;\r\n        uint loopsb = (b.length + 31) / 32;\r\n        assembly {\r\n            let m := mload(0x40)\r\n            mstore(m, totallen)\r\n            for {  let i := 0 } lt(i, loopsa) { i := add(1, i) } { mstore(add(m, mul(32, add(1, i))), mload(add(a, mul(32, add(1, i))))) }\r\n            for {  let i := 0 } lt(i, loopsb) { i := add(1, i) } { mstore(add(m, add(mul(32, add(1, i)), alen)), mload(add(b, mul(32, add(1, i))))) }\r\n            mstore(0x40, add(m, add(32, totallen)))\r\n            c := m\r\n        }\r\n    }\r\n\r\n    function bytesToAddress(uint _offst, bytes memory _input) internal pure returns (address) {\r\n        return BytesToTypes.bytesToAddress(_offst, _input);\r\n    }\r\n\r\n    function bytesToUint256(uint _offst, bytes memory _input) internal pure returns (uint256) {\r\n        return BytesToTypes.bytesToUint256(_offst, _input);\r\n    } \r\n\r\n}\r\n"
    },
    "contracts/interface/IAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0;\r\n\r\ninterface IAdapter {\r\n    function name() external view returns (string memory);\r\n    function swapGasEstimate() external view returns (uint);\r\n    function swap(uint256, uint256, address, address, address) external;\r\n    function query(uint256, address, address) external view returns (uint);\r\n}"
    },
    "contracts/lib/BytesToTypes.sol": {
      "content": "// From https://github.com/pouladzade/Seriality/blob/master/src/BytesToTypes.sol (Licensed under Apache2.0)\r\n\r\n// SPDX-License-Identifier: Apache2.0\r\npragma solidity >=0.7.0;\r\n\r\nlibrary BytesToTypes {\r\n\r\n    function bytesToAddress(uint _offst, bytes memory _input) internal pure returns (address _output) {\r\n        \r\n        assembly {\r\n            _output := mload(add(_input, _offst))\r\n        }\r\n    }\r\n\r\n    function bytesToUint256(uint _offst, bytes memory _input) internal pure returns (uint256 _output) {\r\n        \r\n        assembly {\r\n            _output := mload(add(_input, _offst))\r\n        }\r\n    } \r\n}\r\n"
    },
    "contracts/adapters/UnilikeAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\r\n//       ╞╬╬                                                                    ╬╠╬\r\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\r\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\r\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\r\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\r\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\r\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\r\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\r\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\r\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\r\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\r\n//                              \r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity >=0.7.0;\r\n\r\nimport \"../interface/IUnilikeFactory.sol\";\r\nimport \"../interface/IUnilikePair.sol\";\r\nimport \"../interface/IERC20.sol\";\r\nimport \"../lib/SafeERC20.sol\";\r\nimport \"../lib/SafeMath.sol\";\r\nimport \"../YakAdapter.sol\";\r\n\r\ncontract UnilikeAdapter is YakAdapter {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n\r\n    bytes32 public constant ID = keccak256(\"UnilikeAdapter\");\r\n    uint internal constant FEE_DENOMINATOR = 1e3;\r\n    uint public immutable feeCompliment;\r\n    address public immutable factory;\r\n\r\n    constructor(\r\n        string memory _name, \r\n        address _factory, \r\n        uint _fee,\r\n        uint _swapGasEstimate\r\n    ) {\r\n        require(FEE_DENOMINATOR > _fee, 'YakUnilikeAdapter: Fee greater than the denominator');\r\n        factory = _factory;\r\n        name = _name;\r\n        feeCompliment = FEE_DENOMINATOR.sub(_fee);\r\n        setSwapGasEstimate(_swapGasEstimate);\r\n        setAllowances();\r\n    }\r\n\r\n    function setAllowances() public override onlyOwner {\r\n        IERC20(WAVAX).safeApprove(WAVAX, UINT_MAX);\r\n    }\r\n\r\n    function _approveIfNeeded(address tokenIn, uint amount) internal override {}\r\n\r\n    function _getAmountOut(\r\n        uint _amountIn, \r\n        uint _reserveIn, \r\n        uint _reserveOut\r\n    ) internal view returns (uint amountOut) {\r\n        // Based on https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/UniswapV2Router02.sol\r\n        uint amountInWithFee = _amountIn.mul(feeCompliment);\r\n        uint numerator = amountInWithFee.mul(_reserveOut);\r\n        uint denominator = _reserveIn.mul(FEE_DENOMINATOR).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    function _query(\r\n        uint _amountIn, \r\n        address _tokenIn, \r\n        address _tokenOut\r\n    ) internal override view returns (uint) {\r\n        if (_tokenIn == _tokenOut || _amountIn==0) { return 0; }\r\n        address pair = IUnilikeFactory(factory).getPair(_tokenIn, _tokenOut);\r\n        if (pair == address(0)) { return 0; }\r\n        (uint r0, uint r1, ) = IUnilikePair(pair).getReserves();\r\n        (uint reserveIn, uint reserveOut) = _tokenIn < _tokenOut ? (r0, r1) : (r1, r0);\r\n        if (reserveIn > 0 && reserveOut > 0) {\r\n            return _getAmountOut(_amountIn, reserveIn, reserveOut);\r\n        }\r\n    }\r\n\r\n    function _swap(\r\n        uint _amountIn, \r\n        uint _amountOut, \r\n        address _tokenIn, \r\n        address _tokenOut, \r\n        address to\r\n    ) internal override {\r\n        address pair = IUnilikeFactory(factory).getPair(_tokenIn, _tokenOut);\r\n        (uint amount0Out, uint amount1Out) = (_tokenIn < _tokenOut) ? (uint(0), _amountOut) : (_amountOut, uint(0));\r\n        IERC20(_tokenIn).safeTransfer(pair, _amountIn);\r\n        IUnilikePair(pair).swap(\r\n            amount0Out, \r\n            amount1Out,\r\n            to, \r\n            new bytes(0)\r\n        );\r\n    }\r\n}"
    },
    "contracts/interface/IUnilikeFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0;\r\n\r\ninterface IUnilikeFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}"
    },
    "contracts/interface/IUnilikePair.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0;\r\n\r\ninterface IUnilikePair {\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n}"
    },
    "contracts/interface/IKyberRouter.sol": {
      "content": "pragma solidity >=0.7.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\ninterface IKyberRouter {\r\n\r\n    function getAmountsOut(\r\n        uint256 amountIn,\r\n        address[] calldata poolsPath,\r\n        IERC20[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n}\r\n"
    },
    "contracts/adapters/PlatypusAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\r\n//       ╞╬╬                                                                    ╬╠╬\r\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\r\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\r\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\r\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\r\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\r\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\r\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\r\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\r\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\r\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\r\n//  \r\n//                            ,=.\r\n//                ,=\"\"\"\"==.__.=\"  o\".___\r\n//          ,=.==\"                  ___/\r\n//    ,==.,\"    ,          , \\,===\"\"\r\n//   <     ,==)  \\\"'\"=._.==)  \\\r\n//    `==''    `\"           `\"\r\n//\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity >=0.7.0;\r\n\r\nimport \"../interface/IPlatypus.sol\";\r\nimport \"../interface/IERC20.sol\";\r\nimport \"../interface/IWETH.sol\";\r\nimport \"../lib/SafeERC20.sol\";\r\nimport \"../YakAdapter.sol\";\r\n\r\ncontract PlatypusAdapter is YakAdapter {\r\n    using SafeERC20 for IERC20;\r\n\r\n    bytes32 public constant indentifier = keccak256(\"PlatypusAdapter\");\r\n    mapping (address => bool) public isPoolToken;\r\n    address public pool;\r\n\r\n    constructor (\r\n        string memory _name, \r\n        address _pool, \r\n        uint _swapGasEstimate\r\n    ) {\r\n        pool = _pool;\r\n        name = _name;\r\n        setSwapGasEstimate(_swapGasEstimate);\r\n        _setPoolTokens();\r\n    }\r\n\r\n    function setAllowances() public override onlyOwner {}\r\n\r\n    // Mapping indicator which tokens are included in the pool \r\n    function _setPoolTokens() internal {\r\n        address[] memory poolTkns = IPlatypus(pool).getTokenAddresses();\r\n        for (uint8 i=0; i<poolTkns.length; i++) {\r\n            isPoolToken[poolTkns[i]] = true;\r\n        }\r\n    }\r\n\r\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal override {\r\n        uint allowance = IERC20(_tokenIn).allowance(address(this), pool);\r\n        if (allowance < _amount) {\r\n            IERC20(_tokenIn).safeApprove(pool, UINT_MAX);\r\n        }\r\n    }\r\n\r\n    function _query(\r\n        uint _amountIn, \r\n        address _tokenIn, \r\n        address _tokenOut\r\n    ) internal override view returns (uint) {\r\n        if (\r\n            !isPoolToken[_tokenIn] || \r\n            !isPoolToken[_tokenOut] ||\r\n            _tokenIn == _tokenOut ||\r\n            _amountIn == 0 ||\r\n            IPlatypus(pool).paused()\r\n        ) { return 0; }\r\n        try IPlatypus(pool).quotePotentialSwap(\r\n            _tokenIn, \r\n            _tokenOut, \r\n            _amountIn\r\n        ) returns (uint amountOut) {\r\n            return amountOut;\r\n        } catch {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function _swap(\r\n        uint _amountIn, \r\n        uint _amountOut, \r\n        address _tokenIn, \r\n        address _tokenOut, \r\n        address _to\r\n    ) internal override {\r\n        IPlatypus(pool).swap(\r\n            _tokenIn, \r\n            _tokenOut, \r\n            _amountIn, \r\n            _amountOut,\r\n            _to,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n}"
    },
    "contracts/interface/IPlatypus.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0;\r\n\r\ninterface IPlatypus {\r\n\r\n    // Views\r\n    function quotePotentialSwap(\r\n        address fromToken, \r\n        address totoken, \r\n        uint fromAmount\r\n    ) external view returns (uint potentialOutcome);  // Second arg (haircut) is not used\r\n    function getTokenAddresses() external view returns (address[] memory);\r\n    function paused() external view returns (bool);\r\n\r\n    // Modifiers\r\n    function swap(\r\n        address fromToken,\r\n        address toToken,\r\n        uint fromAmount,\r\n        uint minAmountOut, \r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function pause() external;\r\n    function unpause() external;\r\n\r\n}\r\n\r\n\r\n"
    },
    "contracts/adapters/CurveLikeAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\r\n//       ╞╬╬                                                                    ╬╠╬\r\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\r\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\r\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\r\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\r\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\r\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\r\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\r\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\r\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\r\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\r\n//                              \r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity >=0.7.0;\r\n\r\nimport \"../interface/ICurveLikePool.sol\";\r\nimport \"../interface/IERC20.sol\";\r\nimport \"../interface/IWETH.sol\";\r\nimport \"../lib/SafeERC20.sol\";\r\nimport \"../YakAdapter.sol\";\r\n\r\ncontract CurveLikeAdapter is YakAdapter {\r\n    using SafeERC20 for IERC20;\r\n\r\n    bytes32 public constant indentifier = keccak256(\"CurvelikeAdapter\");\r\n    mapping (address => bool) public isPoolToken;\r\n    mapping (address => uint8) public tokenIndex;\r\n    address public pool;\r\n\r\n    constructor (\r\n        string memory _name, \r\n        address _pool, \r\n        uint _swapGasEstimate\r\n    ) {\r\n        pool = _pool;\r\n        name = _name;\r\n        setSwapGasEstimate(_swapGasEstimate);\r\n        _setPoolTokens();\r\n    }\r\n\r\n    // Mapping indicator which tokens are included in the pool \r\n    function _setPoolTokens() internal {\r\n        for (uint8 i=0; true; i++) {\r\n            try ICurveLikePool(pool).getToken(i) returns (address token) {\r\n                isPoolToken[token] = true;\r\n                tokenIndex[token] = i;\r\n            } catch {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setAllowances() public override onlyOwner {}\r\n\r\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal override {\r\n        uint allowance = IERC20(_tokenIn).allowance(address(this), pool);\r\n        if (allowance < _amount) {\r\n            IERC20(_tokenIn).safeApprove(pool, UINT_MAX);\r\n        }\r\n    }\r\n\r\n    function _query(\r\n        uint _amountIn, \r\n        address _tokenIn, \r\n        address _tokenOut\r\n    ) internal override view returns (uint) {\r\n        if (\r\n            !isPoolToken[_tokenIn] || \r\n            !isPoolToken[_tokenOut] ||\r\n            _tokenIn == _tokenOut ||\r\n            _amountIn == 0 ||\r\n            ICurveLikePool(pool).paused()\r\n        ) { return 0; }\r\n        try ICurveLikePool(pool).calculateSwap(\r\n            tokenIndex[_tokenIn], \r\n            tokenIndex[_tokenOut], \r\n            _amountIn\r\n        ) returns (uint amountOut) {\r\n            return amountOut;\r\n        } catch {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function _swap(\r\n        uint _amountIn, \r\n        uint _amountOut, \r\n        address _tokenIn, \r\n        address _tokenOut, \r\n        address _to\r\n    ) internal override {\r\n        // Note that unsupported token will return index 0 which is valid\r\n        ICurveLikePool(pool).swap(\r\n            tokenIndex[_tokenIn], \r\n            tokenIndex[_tokenOut], \r\n            _amountIn, \r\n            _amountOut, \r\n            block.timestamp\r\n        );\r\n        // Confidently transfer amount-out\r\n        _returnTo(_tokenOut, _amountOut, _to);\r\n    }\r\n\r\n}"
    },
    "contracts/interface/ICurveLikePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\ninterface ICurveLikePool {\r\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\r\n    function getTokenBalance(uint8 index) external view returns (uint256);\r\n    function getToken(uint8 index) external view returns (address);\r\n    function getVirtualPrice() external view returns (uint256);\r\n    function owner() external view returns (address);\r\n    function paused() external view returns (bool);\r\n    function calculateSwap(\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx\r\n    ) external view returns (uint256);\r\n    function unpause() external;\r\n    function pause() external;\r\n    function swap(\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx,\r\n        uint256 minDy,\r\n        uint256 deadline\r\n    ) external returns (uint256);\r\n}"
    },
    "contracts/interface/ImYAK.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\ninterface ImYAK is IERC20 {\r\n    function unmoon(uint, address) external;\r\n    function moon(uint, address) external;\r\n}"
    },
    "contracts/adapters/MiniYakAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\r\n//       ╞╬╬                                                                    ╬╠╬\r\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\r\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\r\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\r\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\r\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\r\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\r\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\r\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\r\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\r\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\r\n//                              \r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity >=0.7.0;\r\n\r\nimport \"../interface/ImYAK.sol\";\r\nimport \"../lib/SafeERC20.sol\";\r\nimport \"../lib/SafeMath.sol\";\r\nimport \"../YakAdapter.sol\";\r\n\r\ncontract MiniYakAdapter is YakAdapter {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n\r\n    bytes32 public constant ID = keccak256('MiniYakAdapter');\r\n    address public constant YAK = 0x59414b3089ce2AF0010e7523Dea7E2b35d776ec7;\r\n    address public constant mYAK = 0xdDAaAD7366B455AfF8E7c82940C43CEB5829B604;\r\n\r\n    constructor(uint _swapGasEstimate) {\r\n        setSwapGasEstimate(_swapGasEstimate);\r\n        setAllowances();\r\n    }\r\n\r\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal override {}\r\n\r\n    function _query(\r\n        uint _amountIn, \r\n        address _tokenIn, \r\n        address _tokenOut\r\n    ) internal override pure returns (uint amountOut) {  \r\n        if ((_tokenIn == mYAK && _tokenOut == YAK) || (_tokenIn == YAK && _tokenOut == mYAK)) {\r\n            amountOut = _amountIn;\r\n        }\r\n    }\r\n\r\n    function _swap(\r\n        uint _amountIn, \r\n        uint _amountOut, \r\n        address _tokenIn, \r\n        address _tokenOut, \r\n        address _to\r\n    ) internal override {\r\n        if (_tokenIn == mYAK && _tokenOut == YAK) {\r\n            ImYAK(mYAK).unmoon(_amountIn, _to);\r\n        } else if (_tokenIn == YAK && _tokenOut == mYAK) {\r\n            ImYAK(mYAK).moon(_amountIn, _to);\r\n        } else {\r\n            revert(\"MiniYakAdapter: Unsupported token\");\r\n        }\r\n    }\r\n\r\n    function setAllowances() public override {\r\n        // Approve max for mYak and Yak\r\n        IERC20(mYAK).safeApprove(mYAK, UINT_MAX);\r\n        IERC20(YAK).safeApprove(mYAK, UINT_MAX);\r\n    }\r\n\r\n}"
    },
    "contracts/adapters/KyberAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\r\n//       ╞╬╬                                                                    ╬╠╬\r\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\r\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\r\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\r\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\r\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\r\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\r\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\r\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\r\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\r\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\r\n//                              \r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity >=0.7.0;\r\n\r\nimport \"../interface/IKyberPool.sol\";\r\nimport \"../interface/IERC20.sol\";\r\nimport \"../lib/SafeERC20.sol\";\r\nimport \"../lib/SafeMath.sol\";\r\nimport \"../YakAdapter.sol\";\r\n\r\ncontract KyberAdapter is YakAdapter {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n\r\n    bytes32 public constant ID = keccak256(\"KyberAdapter\");\r\n    uint public constant PRECISION = 1e18;\r\n    mapping(address => mapping(address => address)) internal TKNS_TO_POOL; \r\n\r\n    constructor(\r\n        string memory _name, \r\n        address[] memory _pools,\r\n        uint _swapGasEstimate\r\n    ) {\r\n        name = _name;\r\n        setSwapGasEstimate(_swapGasEstimate);\r\n        addPools(_pools);\r\n        setAllowances();\r\n    }\r\n\r\n    function setAllowances() public override onlyOwner {\r\n        IERC20(WAVAX).safeApprove(WAVAX, UINT_MAX);\r\n    }\r\n\r\n    function addPools(address[] memory _pools) public onlyOwner {\r\n        // Note: Overrides existing if pool has same tkns but different APR\r\n        for (uint i = 0; i < _pools.length; i++) {\r\n            address tkn0 = IKyberPool(_pools[i]).token0();\r\n            address tkn1 = IKyberPool(_pools[i]).token1();\r\n            TKNS_TO_POOL[tkn0][tkn1] = _pools[i];\r\n            TKNS_TO_POOL[tkn1][tkn0] = _pools[i];\r\n        }\r\n    }\r\n\r\n    function removePools(address[] memory _pools) public onlyOwner {\r\n        // Note: Overrides existing if pool has same tkns but different APR\r\n        for (uint i = 0; i < _pools.length; i++) {\r\n            address tkn0 = IKyberPool(_pools[i]).token0();\r\n            address tkn1 = IKyberPool(_pools[i]).token1();\r\n            TKNS_TO_POOL[tkn0][tkn1] = address(0);\r\n            TKNS_TO_POOL[tkn1][tkn0] = address(0);\r\n        }\r\n    }\r\n\r\n    function getPool(address tkn0, address tkn1) public view returns (address) {\r\n        return TKNS_TO_POOL[tkn0][tkn1];\r\n    }\r\n\r\n    function _approveIfNeeded(address tokenIn, uint amount) internal override {}\r\n\r\n    function _getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 vReserveIn,\r\n        uint256 vReserveOut,\r\n        uint256 feeInPrecision\r\n    ) internal pure returns (uint256 amountOut) {\r\n        // Based on https://github.com/dynamic-amm/smart-contracts/blob/master/contracts/libraries/DMMLibrary.sol\r\n        uint256 amountInWithFee = amountIn.mul(PRECISION.sub(feeInPrecision))/(PRECISION);\r\n        uint256 numerator = amountInWithFee.mul(vReserveOut);\r\n        uint256 denominator = vReserveIn.add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    function _query(\r\n        uint256 _amountIn,\r\n        address _tokenIn,\r\n        address _tokenOut\r\n    ) internal view override returns (uint) {\r\n        if (_tokenIn == _tokenOut || _amountIn == 0) {\r\n            return 0;\r\n        }\r\n        address pool = getPool(_tokenIn, _tokenOut);\r\n        if (pool == address(0)) {\r\n            return 0;\r\n        }\r\n        (\r\n            uint112 r0,\r\n            uint112 r1,\r\n            uint112 vr0,\r\n            uint112 vr1,\r\n            uint256 feeInPrecision\r\n        ) = IKyberPool(pool).getTradeInfo();\r\n        (uint112 reserveIn, uint112 reserveOut) = _tokenIn < _tokenOut\r\n            ? (r0, r1)\r\n            : (r1, r0);\r\n        (uint112 vReserveIn, uint112 vReserveOut) = _tokenIn < _tokenOut\r\n            ? (vr0, vr1)\r\n            : (vr1, vr0);\r\n        if (reserveIn > 0 && reserveOut > 0) {\r\n            uint256 amountOut = _getAmountOut(\r\n                _amountIn,\r\n                vReserveIn,\r\n                vReserveOut,\r\n                feeInPrecision\r\n            );\r\n            if (reserveOut > amountOut) return amountOut;\r\n            else return 0;\r\n        }\r\n    }\r\n\r\n    function _swap(\r\n        uint _amountIn, \r\n        uint _amountOut, \r\n        address _tokenIn, \r\n        address _tokenOut, \r\n        address to\r\n    ) internal override {\r\n        address pair = getPool(_tokenIn, _tokenOut);\r\n        (\r\n            uint amount0Out, \r\n            uint amount1Out\r\n        ) = (_tokenIn < _tokenOut) ? (uint(0), _amountOut) : (_amountOut, uint(0));\r\n        IERC20(_tokenIn).safeTransfer(pair, _amountIn);\r\n        IKyberPool(pair).swap(\r\n            amount0Out, \r\n            amount1Out,\r\n            to, \r\n            new bytes(0)\r\n        );\r\n    }\r\n}"
    },
    "contracts/interface/IKyberPool.sol": {
      "content": "pragma solidity >=0.7.0;\r\n\r\ninterface IKyberPool {\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n    function getTradeInfo()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 _vReserve0,\r\n            uint112 _vReserve1,\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint256 feeInPrecision\r\n        );\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n\r\n}"
    },
    "contracts/adapters/CurvePlainAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\r\n//       ╞╬╬                                                                    ╬╠╬\r\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\r\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\r\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\r\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\r\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\r\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\r\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\r\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\r\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\r\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\r\n//                              \r\n\r\n// Supports Curve 3poolV2 pool and alike\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity >=0.7.0;\r\n\r\nimport \"../interface/ICurvePlain.sol\";\r\nimport \"../interface/IERC20.sol\";\r\nimport \"../lib/SafeERC20.sol\";\r\nimport \"../lib/SafeMath.sol\";\r\nimport \"../YakAdapter.sol\";\r\n\r\ncontract CurvePlainAdapter is YakAdapter {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n\r\n    bytes32 public constant id = keccak256(\"CurvePlainAdapter\");\r\n    mapping (address => bool) public isPoolToken;\r\n    mapping (address => int128) public tokenIndex;\r\n    address public pool;\r\n\r\n    constructor (string memory _name, address _pool, uint _swapGasEstimate) {\r\n        name = _name;\r\n        pool = _pool;\r\n        _setPoolTokens();\r\n        setSwapGasEstimate(_swapGasEstimate);\r\n    }\r\n\r\n    // Mapping indicator which tokens are included in the pool \r\n    function _setPoolTokens() internal {\r\n        for (uint i=0; true; i++) {\r\n            try ICurvePlain(pool).coins(i) returns (address token) {\r\n                isPoolToken[token] = true;\r\n                tokenIndex[token] = int128(int(i));\r\n            } catch {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setAllowances() public override onlyOwner {}\r\n\r\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal override {\r\n        uint allowance = IERC20(_tokenIn).allowance(address(this), pool);\r\n        if (allowance < _amount) {\r\n            IERC20(_tokenIn).safeApprove(pool, UINT_MAX);\r\n        }\r\n    }\r\n\r\n    function _query(\r\n        uint _amountIn, \r\n        address _tokenIn, \r\n        address _tokenOut\r\n    ) internal override view returns (uint) {\r\n        if (\r\n            _amountIn==0 || \r\n            _tokenIn==_tokenOut ||\r\n            !isPoolToken[_tokenIn] || \r\n            !isPoolToken[_tokenOut]\r\n        ) { return 0; }\r\n        try ICurvePlain(pool).get_dy(\r\n            tokenIndex[_tokenIn], \r\n            tokenIndex[_tokenOut], \r\n            _amountIn\r\n        ) returns (uint amountOut) {\r\n            // Account for rounding error (swap and query may calc different amounts) by substracting 1 gwei\r\n            return amountOut == 0 ? 0 : amountOut - 1;\r\n        } catch {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function _swap(\r\n        uint _amountIn, \r\n        uint _amountOut, \r\n        address _tokenIn, \r\n        address _tokenOut, \r\n        address _to\r\n    ) internal override {\r\n        ICurvePlain(pool).exchange(\r\n            tokenIndex[_tokenIn], \r\n            tokenIndex[_tokenOut],\r\n            _amountIn, \r\n            _amountOut\r\n        );\r\n        // Confidently transfer amount-out\r\n        _returnTo(_tokenOut, _amountOut, _to);\r\n    }\r\n\r\n}"
    },
    "contracts/interface/ICurvePlain.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0;\r\n\r\ninterface ICurvePlain {\r\n    function coins(uint256 index) external view returns (address);\r\n    function exchange(\r\n        int128 tokenIndexFrom,\r\n        int128 tokenIndexTo,\r\n        uint256 dx,\r\n        uint256 minDy\r\n    ) external returns (uint256);\r\n    function get_dy(\r\n        int128 tokenIndexFrom,\r\n        int128 tokenIndexTo,\r\n        uint dx\r\n    ) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/adapters/CurveMimAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\r\n//       ╞╬╬                                                                    ╬╠╬\r\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\r\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\r\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\r\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\r\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\r\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\r\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\r\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\r\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\r\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\r\n//                              \r\n\r\n// Supports Curve MIM pool (manually enter base tokens)\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity >=0.7.0;\r\n\r\nimport \"../interface/ICurveMim.sol\";\r\nimport \"../interface/IERC20.sol\";\r\nimport \"../lib/SafeERC20.sol\";\r\nimport \"../lib/SafeMath.sol\";\r\nimport \"../YakAdapter.sol\";\r\n\r\ncontract CurveMimAdapter is YakAdapter {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n\r\n    address public constant basePool = 0x7f90122BF0700F9E7e1F688fe926940E8839F353;\r\n    address public constant swapper = 0x001E3BA199B4FF4B5B6e97aCD96daFC0E2e4156e;\r\n    address public constant pool = 0x30dF229cefa463e991e29D42DB0bae2e122B2AC7;\r\n    bytes32 public constant id = keccak256(\"CurveMimAdapter\");\r\n    mapping (address => int128) public tokenIndex;\r\n    mapping (address => bool) public isPoolToken;\r\n\r\n    constructor (\r\n        string memory _name, \r\n        uint _swapGasEstimate\r\n    ) {\r\n        name = _name;\r\n        _setPoolTokens();\r\n        setSwapGasEstimate(_swapGasEstimate);\r\n    }\r\n\r\n    // Mapping indicator which tokens are included in the pool \r\n    function _setPoolTokens() internal {\r\n        address metaTkn = ICurveMim(pool).coins(0);\r\n        isPoolToken[metaTkn] = true;\r\n        tokenIndex[metaTkn] = 0;\r\n        for (uint i=0; true; i++) {\r\n            try ICurveMim(basePool).underlying_coins(i) returns (address token) {\r\n                isPoolToken[token] = true;\r\n                tokenIndex[token] = int128(int(i)) + 1;\r\n            } catch {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setAllowances() public override onlyOwner {}\r\n\r\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal override {\r\n        uint allowance = IERC20(_tokenIn).allowance(address(this), swapper);\r\n        if (allowance < _amount) {\r\n            IERC20(_tokenIn).safeApprove(swapper, UINT_MAX);\r\n        }\r\n    }\r\n\r\n    function _query(\r\n        uint _amountIn, \r\n        address _tokenIn, \r\n        address _tokenOut\r\n    ) internal override view returns (uint) {\r\n        if (\r\n            _amountIn==0 || \r\n            _tokenIn==_tokenOut ||\r\n            !isPoolToken[_tokenIn] || \r\n            !isPoolToken[_tokenOut]\r\n        ) { return 0; }\r\n        try ICurveMim(pool).get_dy_underlying(\r\n            tokenIndex[_tokenIn], \r\n            tokenIndex[_tokenOut], \r\n            _amountIn\r\n        ) returns (uint amountOut) {\r\n            // `calc_token_amount` in base_pool is used in part of the query\r\n            // this method does account for deposit fee which causes discrepancy\r\n            // between the query result and the actual swap amount by few bps(0-3.2)\r\n            // Additionally there is a rounding error (swap and query may calc different amounts)\r\n            // Account for that with 4 bps discount\r\n            return amountOut == 0 ? 0 : amountOut*(1e4-4)/1e4;\r\n        } catch {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function _swap(\r\n        uint _amountIn, \r\n        uint _amountOut, \r\n        address _tokenIn, \r\n        address _tokenOut, \r\n        address _to\r\n    ) internal override {\r\n        ICurveMim(swapper).exchange_underlying(\r\n            pool,\r\n            tokenIndex[_tokenIn], \r\n            tokenIndex[_tokenOut],\r\n            _amountIn, \r\n            _amountOut\r\n        );\r\n        // Confidently transfer amount-out\r\n        _returnTo(_tokenOut, _amountOut, _to);\r\n    }\r\n\r\n}"
    },
    "contracts/interface/ICurveMim.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0;\r\n\r\ninterface ICurveMim {\r\n    function underlying_coins(uint256 index) external view returns (address);\r\n    function coins(uint256 index) external view returns (address);\r\n    function get_dy_underlying(\r\n        int128 tokenIndexFrom,\r\n        int128 tokenIndexTo,\r\n        uint256 dx\r\n    ) external view returns (uint256);\r\n    function exchange_underlying(\r\n        address pool,\r\n        int128 tokenIndexFrom,\r\n        int128 tokenIndexTo,\r\n        uint256 dx,\r\n        uint256 minDy\r\n    ) external;\r\n}"
    },
    "contracts/interface/ICurvelikeMeta.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0;\r\npragma abicoder v2;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\nstruct SwapStorage {\r\n    uint256 initialA; \r\n    uint256 futureA; \r\n    uint256 initialATime; \r\n    uint256 futureATime; \r\n    uint256 swapFee; \r\n    uint256 adminFee; \r\n    address lpToken;\r\n}\r\n\r\ninterface ICurvelikeMeta {\r\n    function getToken(uint8 index) external view returns (address);\r\n    function getVirtualPrice() external view returns (uint256);\r\n    function owner() external view returns (address);\r\n    function paused() external view returns (bool);\r\n    function calculateSwapUnderlying(\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx\r\n    ) external view returns (uint256);\r\n    function unpause() external;\r\n    function pause() external;\r\n    function swapUnderlying(\r\n        uint8 tokenIndexFrom,\r\n        uint8 tokenIndexTo,\r\n        uint256 dx,\r\n        uint256 minDy,\r\n        uint256 deadline\r\n    ) external returns (uint256);\r\n    function metaSwapStorage() external returns (address);\r\n    function swapStorage() external returns (SwapStorage memory);\r\n}"
    },
    "contracts/adapters/CurvelikeMetaAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\r\n//       ╞╬╬                                                                    ╬╠╬\r\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\r\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\r\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\r\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\r\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\r\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\r\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\r\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\r\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\r\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\r\n//                              \r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity >=0.7.0;\r\npragma abicoder v2;\r\n\r\nimport \"../interface/ICurvelikeMeta.sol\";\r\nimport \"../interface/IERC20.sol\";\r\nimport \"../lib/SafeERC20.sol\";\r\nimport \"../lib/SafeMath.sol\";\r\nimport \"../YakAdapter.sol\";\r\n\r\ncontract CurvelikeMetaAdapter is YakAdapter {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n\r\n    bytes32 public constant id = keccak256(\"CurvelikeMetaAdapter\");\r\n    uint public constant feeDenominator = 1e10;\r\n    address public metaPool;\r\n    address public pool;\r\n    mapping (address => bool) public isPoolToken;\r\n    mapping (address => uint8) public tokenIndex;\r\n    uint public poolFeeCompliment;\r\n\r\n    constructor (string memory _name, address _pool, uint _swapGasEstimate) {\r\n        pool = _pool;\r\n        name = _name;\r\n        metaPool = ICurvelikeMeta(pool).metaSwapStorage();  // Pool that holds USDCe, USDTe, DAIe \r\n        setSwapGasEstimate(_swapGasEstimate);\r\n        setPoolFeeCompliment();\r\n        _setPoolTokens();\r\n    }\r\n\r\n    function setPoolFeeCompliment() public onlyOwner {\r\n        poolFeeCompliment = feeDenominator - ICurvelikeMeta(pool).swapStorage().swapFee;\r\n    }\r\n\r\n    // Mapping indicator which tokens are included in the pool \r\n    function _setPoolTokens() internal {\r\n        // Get nUSD from this pool\r\n        address baseTkn = ICurvelikeMeta(pool).getToken(0);\r\n        isPoolToken[baseTkn] = true;\r\n        tokenIndex[baseTkn] = 0;\r\n        // Get stables from meta pool\r\n        for (uint8 i=0; true; i++) {\r\n            try ICurvelikeMeta(metaPool).getToken(i) returns (address token) {\r\n                isPoolToken[token] = true;\r\n                tokenIndex[token] = i + 1;\r\n            } catch {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setAllowances() public override onlyOwner {}\r\n\r\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal override {\r\n        uint allowance = IERC20(_tokenIn).allowance(address(this), pool);\r\n        if (allowance < _amount) {\r\n            IERC20(_tokenIn).safeApprove(pool, UINT_MAX);\r\n        }\r\n    }\r\n\r\n    function _isPaused() internal view returns (bool) {\r\n        return ICurvelikeMeta(pool).paused() || ICurvelikeMeta(metaPool).paused();\r\n    }\r\n\r\n    function _query(\r\n        uint _amountIn, \r\n        address _tokenIn, \r\n        address _tokenOut\r\n    ) internal override view returns (uint) {\r\n        if (\r\n            _amountIn==0 || \r\n            _tokenIn==_tokenOut ||\r\n            !isPoolToken[_tokenIn] || \r\n            !isPoolToken[_tokenOut] || \r\n            _isPaused()\r\n        ) { return 0; }\r\n        try ICurvelikeMeta(pool).calculateSwapUnderlying(\r\n            tokenIndex[_tokenIn], \r\n            tokenIndex[_tokenOut], \r\n            _amountIn\r\n        ) returns (uint amountOut) {\r\n            return amountOut.mul(poolFeeCompliment) / feeDenominator;\r\n        } catch {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function _swap(\r\n        uint _amountIn, \r\n        uint _amountOut, \r\n        address _tokenIn, \r\n        address _tokenOut, \r\n        address _to\r\n    ) internal override {\r\n        ICurvelikeMeta(pool).swapUnderlying(\r\n            tokenIndex[_tokenIn], \r\n            tokenIndex[_tokenOut],\r\n            _amountIn, \r\n            _amountOut, \r\n            block.timestamp\r\n        );\r\n        // Confidently transfer amount-out\r\n        _returnTo(_tokenOut, _amountOut, _to);\r\n    }\r\n\r\n}"
    },
    "contracts/adapters/Curve2Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\r\n//       ╞╬╬                                                                    ╬╠╬\r\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\r\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\r\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\r\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\r\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\r\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\r\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\r\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\r\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\r\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\r\n//                              \r\n\r\n// Supports Curve AAVE and Ren pool and alike\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity >=0.7.0;\r\n\r\nimport \"../interface/ICurve2.sol\";\r\nimport \"../interface/IERC20.sol\";\r\nimport \"../lib/SafeERC20.sol\";\r\nimport \"../lib/SafeMath.sol\";\r\nimport \"../YakAdapter.sol\";\r\n\r\ncontract Curve2Adapter is YakAdapter {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n\r\n    bytes32 public constant id = keccak256(\"Curve2Adapter\");\r\n    mapping (address => bool) public isPoolToken;\r\n    mapping (address => int128) public tokenIndex;\r\n    address public pool;\r\n\r\n    constructor (string memory _name, address _pool, uint _swapGasEstimate) {\r\n        name = _name;\r\n        pool = _pool;\r\n        _setPoolTokens();\r\n        setSwapGasEstimate(_swapGasEstimate);\r\n    }\r\n\r\n    // Mapping indicator which tokens are included in the pool \r\n    function _setPoolTokens() internal {\r\n        for (uint i=0; true; i++) {\r\n            try ICurve2(pool).underlying_coins(i) returns (address token) {\r\n                isPoolToken[token] = true;\r\n                tokenIndex[token] = int128(int(i));\r\n            } catch {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setAllowances() public override onlyOwner {}\r\n\r\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal override {\r\n        uint allowance = IERC20(_tokenIn).allowance(address(this), pool);\r\n        if (allowance < _amount) {\r\n            IERC20(_tokenIn).safeApprove(pool, UINT_MAX);\r\n        }\r\n    }\r\n\r\n    function _query(\r\n        uint _amountIn, \r\n        address _tokenIn, \r\n        address _tokenOut\r\n    ) internal override view returns (uint) {\r\n        if (\r\n            _amountIn==0 || \r\n            _tokenIn==_tokenOut ||\r\n            !isPoolToken[_tokenIn] || \r\n            !isPoolToken[_tokenOut]\r\n        ) { return 0; }\r\n        try ICurve2(pool).get_dy_underlying(\r\n            tokenIndex[_tokenIn], \r\n            tokenIndex[_tokenOut], \r\n            _amountIn\r\n        ) returns (uint amountOut) {\r\n            // Account for rounding error (swap and query may calc different amounts) by substracting 1 gwei\r\n            return amountOut == 0 ? 0 : amountOut - 1;\r\n        } catch {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function _swap(\r\n        uint _amountIn, \r\n        uint _amountOut, \r\n        address _tokenIn, \r\n        address _tokenOut, \r\n        address _to\r\n    ) internal override {\r\n        ICurve2(pool).exchange_underlying(\r\n            tokenIndex[_tokenIn], \r\n            tokenIndex[_tokenOut],\r\n            _amountIn, \r\n            _amountOut\r\n        );\r\n        // Confidently transfer amount-out\r\n        _returnTo(_tokenOut, _amountOut, _to);\r\n    }\r\n\r\n}"
    },
    "contracts/interface/ICurve2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0;\r\n\r\ninterface ICurve2 {\r\n    function underlying_coins(uint256 index) external view returns (address);\r\n    function get_dy_underlying(\r\n        int128 tokenIndexFrom,\r\n        int128 tokenIndexTo,\r\n        uint256 dx\r\n    ) external view returns (uint256);\r\n    function exchange_underlying(\r\n        int128 tokenIndexFrom,\r\n        int128 tokenIndexTo,\r\n        uint256 dx,\r\n        uint256 minDy\r\n    ) external;\r\n}"
    },
    "contracts/adapters/Curve1Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\r\n//       ╞╬╬                                                                    ╬╠╬\r\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\r\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\r\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\r\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\r\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\r\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\r\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\r\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\r\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\r\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\r\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\r\n//                              \r\n\r\n// Supports Curve Atricrypto pools and alike\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity >=0.7.0;\r\n\r\nimport \"../interface/ICurve1.sol\";\r\nimport \"../interface/IERC20.sol\";\r\nimport \"../lib/SafeERC20.sol\";\r\nimport \"../lib/SafeMath.sol\";\r\nimport \"../YakAdapter.sol\";\r\n\r\ncontract Curve1Adapter is YakAdapter {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n\r\n    bytes32 public constant id = keccak256(\"Curve1Adapter\");\r\n    mapping (address => bool) public isPoolToken;\r\n    mapping (address => uint) public tokenIndex;\r\n    address public pool;\r\n\r\n    constructor (string memory _name, address _pool, uint _swapGasEstimate) {\r\n        name = _name;\r\n        pool = _pool;\r\n        _setPoolTokens();\r\n        setSwapGasEstimate(_swapGasEstimate);\r\n    }\r\n\r\n    // Mapping indicator which tokens are included in the pool \r\n    function _setPoolTokens() internal {\r\n        for (uint i=0; true; i++) {\r\n            try ICurve1(pool).underlying_coins(i) returns (address token) {\r\n                isPoolToken[token] = true;\r\n                tokenIndex[token] = i;\r\n            } catch {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setAllowances() public override onlyOwner {}\r\n\r\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal override {\r\n        uint allowance = IERC20(_tokenIn).allowance(address(this), pool);\r\n        if (allowance < _amount) {\r\n            IERC20(_tokenIn).safeApprove(pool, UINT_MAX);\r\n        }\r\n    }\r\n\r\n    function _query(\r\n        uint _amountIn, \r\n        address _tokenIn, \r\n        address _tokenOut\r\n    ) internal override view returns (uint) {\r\n        if (\r\n            _amountIn==0 || \r\n            _tokenIn==_tokenOut ||\r\n            !isPoolToken[_tokenIn] || \r\n            !isPoolToken[_tokenOut]\r\n        ) { return 0; }\r\n        try ICurve1(pool).get_dy_underlying(\r\n            tokenIndex[_tokenIn], \r\n            tokenIndex[_tokenOut], \r\n            _amountIn\r\n        ) returns (uint amountOut) {\r\n            // `calc_token_amount` in base_pool is used in part of the query\r\n            // this method does account for deposit fee which causes discrepancy\r\n            // between the query result and the actual swap amount by few bps(0-3.2)\r\n            // Additionally there is a rounding error (swap and query may calc different amounts)\r\n            // Account for that with 4 bps discount\r\n            return amountOut == 0 ? 0 : amountOut*(1e4-4)/1e4;\r\n        } catch {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function _swap(\r\n        uint _amountIn, \r\n        uint _amountOut, \r\n        address _tokenIn, \r\n        address _tokenOut, \r\n        address _to\r\n    ) internal override {\r\n        ICurve1(pool).exchange_underlying(\r\n            tokenIndex[_tokenIn], \r\n            tokenIndex[_tokenOut],\r\n            _amountIn, \r\n            _amountOut\r\n        );\r\n        // Confidently transfer amount-out\r\n        _returnTo(_tokenOut, _amountOut, _to);\r\n    }\r\n\r\n}"
    },
    "contracts/interface/ICurve1.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0;\r\n\r\ninterface ICurve1 {\r\n    function underlying_coins(uint256 index) external view returns (address);\r\n    function exchange_underlying(\r\n        uint256 tokenIndexFrom,\r\n        uint256 tokenIndexTo,\r\n        uint256 dx,\r\n        uint256 minDy\r\n    ) external;\r\n    function get_dy_underlying(\r\n        uint tokenIndexFrom,\r\n        uint tokenIndexTo,\r\n        uint256 dx\r\n    ) external view returns (uint256);\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}