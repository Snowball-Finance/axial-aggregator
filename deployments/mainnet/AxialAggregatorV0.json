{
  "address": "0x05F2F176b491ec11555cbE45B99748F999E13933",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_internalRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_externalRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldExternalRouter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newExternalRouter",
          "type": "address"
        }
      ],
      "name": "UpdatedExternalRouter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldInternalRouter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newInternalRouter",
          "type": "address"
        }
      ],
      "name": "UpdatedInternalRouter",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ExternalRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "InternalRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WAVAX",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxSteps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct AxialAggregator.FindBestPathParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "findBestPath",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "gasEstimate",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRouter.FormattedOfferWithGas",
          "name": "bestPath",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "useInternalRouter",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_externalRouter",
          "type": "address"
        }
      ],
      "name": "setExternalRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_internalRouter",
          "type": "address"
        }
      ],
      "name": "setInternalRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            }
          ],
          "internalType": "struct IRouter.Trade",
          "name": "_trade",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_useInternalRouter",
          "type": "bool"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x241868199941877d96c382e38f93320a9ae26b3da9010aa1327e8c148bcd3aef",
  "receipt": {
    "to": null,
    "from": "0x8486662EafB15d77d4fA128146F3620C78e5F226",
    "contractAddress": "0x05F2F176b491ec11555cbE45B99748F999E13933",
    "transactionIndex": 0,
    "gasUsed": "1130079",
    "logsBloom": "0x
    "blockHash": "0x8a7995decb8e4c21cb7005b17d78784fa569a97234cf7fdc76e30276a4e752fc",
    "transactionHash": "0x241868199941877d96c382e38f93320a9ae26b3da9010aa1327e8c148bcd3aef",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10976199,
        "transactionHash": "0x241868199941877d96c382e38f93320a9ae26b3da9010aa1327e8c148bcd3aef",
        "address": "0x05F2F176b491ec11555cbE45B99748F999E13933",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008486662eafb15d77d4fa128146f3620c78e5f226"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8a7995decb8e4c21cb7005b17d78784fa569a97234cf7fdc76e30276a4e752fc"
      }
    ],
    "blockNumber": 10976199,
    "cumulativeGasUsed": "1130079",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x08c28A3670f5821F6B2D763437816b67010f53D4",
    "0x547730f642913E50ad8B2Db2dE9F3479E8015BC1"
  ],
  "solcInputHash": "edf7c8026a528a08f4d63c4a62ce5280",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_internalRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_externalRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldExternalRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newExternalRouter\",\"type\":\"address\"}],\"name\":\"UpdatedExternalRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldInternalRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newInternalRouter\",\"type\":\"address\"}],\"name\":\"UpdatedInternalRouter\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ExternalRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"InternalRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAVAX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSteps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct AxialAggregator.FindBestPathParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"findBestPath\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"gasEstimate\",\"type\":\"uint256\"}],\"internalType\":\"struct IRouter.FormattedOfferWithGas\",\"name\":\"bestPath\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"useInternalRouter\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_externalRouter\",\"type\":\"address\"}],\"name\":\"setExternalRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_internalRouter\",\"type\":\"address\"}],\"name\":\"setInternalRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"internalType\":\"struct IRouter.Trade\",\"name\":\"_trade\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useInternalRouter\",\"type\":\"bool\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"findBestPath((uint256,address,address,uint256,uint256))\":{\"params\":{\"_params\":\"This includes the input token, output token, max number of steps to use and amount in.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"swap((uint256,uint256,address[],address[]),address,uint256,bool)\":{\"details\":\"The aggregator must be approved to spend users input token.\",\"params\":{\"_fee\":\"The fee to be paid by the sender.\",\"_to\":\"The output amount will be sent to this address.\",\"_trade\":\"This includes the input token, output token, the path to use, adapters and input amounts.\",\"_useInternalRouter\":\"Specifies whether to use the internal router or external router.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"ExternalRouter\":{\"details\":\"Router that swaps across all non-Axial pools; \"},\"InternalRouter\":{\"details\":\"Router that swaps across Axial pools;\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"findBestPath((uint256,address,address,uint256,uint256))\":{\"notice\":\"Finds the best path between tokenIn & tokenOut, checking Axial owned pools first.\"},\"setExternalRouter(address)\":{\"notice\":\"Set router to be used for swapping across non-Axial pools.\"},\"setInternalRouter(address)\":{\"notice\":\"Set router to be used for swapping across Axial pools.\"},\"swap((uint256,uint256,address[],address[]),address,uint256,bool)\":{\"notice\":\"Swaps input token to output token using the specified path and adapters.\"}},\"notice\":\"Aggregator contract to help swapping across known pools but favoring Axial pools when there is a path.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AxialAggregator.sol\":\"AxialAggregator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/AxialAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./interface/IRouter.sol\\\";\\nimport \\\"./lib/SafeMath.sol\\\";\\n\\n/// @notice Aggregator contract to help swapping across known pools but favoring Axial pools when there is a path.\\ncontract AxialAggregator is Ownable {\\n    using SafeMath for uint;\\n\\n    /// @dev Router that swaps across Axial pools;\\n    address public InternalRouter;\\n    /// @dev Router that swaps across all non-Axial pools; \\n    address public ExternalRouter;\\n\\n    address public constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n\\n    struct FindBestPathParams {\\n        uint256 amountIn;\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 maxSteps;\\n        uint gasPrice;\\n    }\\n\\n    event UpdatedInternalRouter(\\n        address _oldInternalRouter, \\n        address _newInternalRouter\\n    );\\n\\n    event UpdatedExternalRouter(\\n        address _oldExternalRouter, \\n        address _newExternalRouter\\n    );\\n\\n    constructor(address _internalRouter, address _externalRouter) {\\n        require(\\n            _internalRouter != address(0),\\n            \\\"Aggregator: _internalRouter not set\\\"\\n        );\\n        require(\\n            _externalRouter != address(0),\\n            \\\"Aggregator: _externalRouter not set\\\"\\n        );\\n\\n        InternalRouter = _internalRouter;\\n        ExternalRouter = _externalRouter;\\n    }\\n\\n    /// @notice Set router to be used for swapping across Axial pools.\\n    function setInternalRouter(address _internalRouter) public onlyOwner {\\n        emit UpdatedInternalRouter(InternalRouter, _internalRouter);\\n        InternalRouter = _internalRouter;\\n    }\\n\\n    /// @notice Set router to be used for swapping across non-Axial pools.\\n    function setExternalRouter(address _externalRouter) public onlyOwner {\\n        emit UpdatedExternalRouter(ExternalRouter, _externalRouter);\\n        ExternalRouter = _externalRouter;\\n    }\\n\\n    /// @notice Finds the best path between tokenIn & tokenOut, checking Axial owned pools first.\\n    /// @param _params This includes the input token, output token, max number of steps to use and amount in.\\n    function findBestPath(FindBestPathParams calldata _params) external view returns (IRouter.FormattedOfferWithGas memory bestPath, bool useInternalRouter) {\\n        IRouter.FormattedOfferWithGas memory offer;\\n        bool UseInternalRouter;\\n\\n        IRouter.FormattedOffer memory gasQuery = IRouter(ExternalRouter).findBestPath(1e18, WAVAX, _params.tokenOut, 2);\\n        uint tknOutPriceNwei = gasQuery.amounts[gasQuery.amounts.length-1].mul(_params.gasPrice/1e9);\\n\\n        // Query internal router for best path\\n        offer = IRouter(InternalRouter).findBestPathWithGas(\\n            _params.amountIn,\\n            _params.tokenIn,\\n            _params.tokenOut,\\n            _params.maxSteps,\\n            _params.gasPrice,\\n            tknOutPriceNwei\\n        );\\n\\n        // Check if internal router returned an offer\\n        if (offer.adapters.length > 0) {\\n            UseInternalRouter = true;\\n        } else {\\n            offer = IRouter(ExternalRouter).findBestPathWithGas(\\n                _params.amountIn,\\n                _params.tokenIn,\\n                _params.tokenOut,\\n                _params.maxSteps,\\n                _params.gasPrice,\\n                tknOutPriceNwei\\n            );\\n        }\\n\\n        return (offer, UseInternalRouter);\\n    }\\n\\n    /// @notice Swaps input token to output token using the specified path and adapters.\\n    /// @param _trade This includes the input token, output token, the path to use, adapters and input amounts.\\n    /// @param _to The output amount will be sent to this address.\\n    /// @param _fee The fee to be paid by the sender.\\n    /// @param _useInternalRouter Specifies whether to use the internal router or external router.\\n    /// @dev The aggregator must be approved to spend users input token.\\n    function swap(\\n        IRouter.Trade calldata _trade,\\n        address _to,\\n        uint256 _fee,\\n        bool _useInternalRouter\\n    ) external {\\n        require(_to != address(0), \\\"Aggregator: _to not set\\\");\\n\\n        if(_useInternalRouter) {\\n            (bool success,) = InternalRouter.delegatecall(\\n                abi.encodeWithSelector(IRouter(InternalRouter).swapNoSplit.selector, \\n                _trade, _to, _fee)\\n            );\\n\\n            require(success, \\\"Aggregator: InternalRouter.swapNoSplit failed\\\");\\n        }\\n        else{\\n            (bool success,) = ExternalRouter.delegatecall(\\n                abi.encodeWithSelector(IRouter(ExternalRouter).swapNoSplit.selector, \\n                _trade, _to, _fee)\\n            );\\n\\n            require(success, \\\"Aggregator: ExternalRouter.swapNoSplit failed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x037dbb8c9ecaf35bfde07fbdeecf5022ab11664966943489b10ea1637570b9ef\",\"license\":\"GPL-3.0-only\"},\"contracts/interface/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n/// @notice Router contract interface\\ninterface IRouter {\\n    struct Trade {\\n        uint amountIn;\\n        uint amountOut;\\n        address[] path;\\n        address[] adapters;\\n    }\\n\\n    struct FormattedOffer {\\n        uint[] amounts;\\n        address[] adapters;\\n        address[] path;\\n    }\\n\\n    struct FormattedOfferWithGas {\\n        uint[] amounts;\\n        address[] adapters;\\n        address[] path;\\n        uint gasEstimate;\\n    }\\n\\n    function findBestPath(\\n        uint256 _amountIn, \\n        address _tokenIn, \\n        address _tokenOut, \\n        uint _maxSteps\\n    ) external view returns (FormattedOffer memory);\\n\\n    function findBestPathWithGas(\\n        uint256 _amountIn, \\n        address _tokenIn, \\n        address _tokenOut, \\n        uint _maxSteps,\\n        uint _gasPrice,\\n        uint _tokenOutPrice\\n    ) external view returns (FormattedOfferWithGas memory);\\n  \\n    function swapNoSplit(\\n        Trade calldata _trade,\\n        address _to,\\n        uint _fee\\n    ) external;\\n}\",\"keccak256\":\"0xf2e8d38b364e1dc65f26941e9237c20fa6d4f1226b180a5ba6e5ca2c170aee0a\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8b25f8514264f6d0ed4279a311d1be64012183292b1e7d6707107928dbac1142\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: Caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: New owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1331d91852367ea5319eed242ef8ebbf245a0271f2b19093f5521ae206c9a1b3\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'SafeMath: ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'SafeMath: ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'SafeMath: ds-math-mul-overflow');\\n    }\\n}\",\"keccak256\":\"0xee319854a4e682f8fab4f0404aa9604c9eea8190f6ec72c9cc67f25785b3ae01\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "findBestPath((uint256,address,address,uint256,uint256))": {
        "params": {
          "_params": "This includes the input token, output token, max number of steps to use and amount in."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "swap((uint256,uint256,address[],address[]),address,uint256,bool)": {
        "details": "The aggregator must be approved to spend users input token.",
        "params": {
          "_fee": "The fee to be paid by the sender.",
          "_to": "The output amount will be sent to this address.",
          "_trade": "This includes the input token, output token, the path to use, adapters and input amounts.",
          "_useInternalRouter": "Specifies whether to use the internal router or external router."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "ExternalRouter": {
        "details": "Router that swaps across all non-Axial pools; "
      },
      "InternalRouter": {
        "details": "Router that swaps across Axial pools;"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "findBestPath((uint256,address,address,uint256,uint256))": {
        "notice": "Finds the best path between tokenIn & tokenOut, checking Axial owned pools first."
      },
      "setExternalRouter(address)": {
        "notice": "Set router to be used for swapping across non-Axial pools."
      },
      "setInternalRouter(address)": {
        "notice": "Set router to be used for swapping across Axial pools."
      },
      "swap((uint256,uint256,address[],address[]),address,uint256,bool)": {
        "notice": "Swaps input token to output token using the specified path and adapters."
      }
    },
    "notice": "Aggregator contract to help swapping across known pools but favoring Axial pools when there is a path.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6598,
        "contract": "contracts/AxialAggregator.sol:AxialAggregator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14,
        "contract": "contracts/AxialAggregator.sol:AxialAggregator",
        "label": "InternalRouter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 17,
        "contract": "contracts/AxialAggregator.sol:AxialAggregator",
        "label": "ExternalRouter",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}