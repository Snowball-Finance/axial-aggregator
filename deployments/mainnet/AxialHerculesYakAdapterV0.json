{
  "address": "0xdB3BC06d644E4d71731664D3F4bbe1C3c4726bcf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_swapGasEstimate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newEstimate",
          "type": "uint256"
        }
      ],
      "name": "UpdatedGasEstimate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenFrom",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "name": "YakAdapterSwap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "indentifier",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPoolToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "query",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setAllowances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_estimate",
          "type": "uint256"
        }
      ],
      "name": "setSwapGasEstimate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapGasEstimate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2e041c278bbd2de1e0c97e9014ae1b5e47698e39a842d0653eecbdd95de5b711",
  "receipt": {
    "to": null,
    "from": "0xF5f08Ba7F46e2a86b5ef3BFD56c2097C9f4276D7",
    "contractAddress": "0xdB3BC06d644E4d71731664D3F4bbe1C3c4726bcf",
    "transactionIndex": 0,
    "gasUsed": "1403870",
    "logsBloom": "0x
    "blockHash": "0xfc281d8e16bf16c0d0be7740f588e1a1f198574775c93d297d3e8b4cfba67264",
    "transactionHash": "0x2e041c278bbd2de1e0c97e9014ae1b5e47698e39a842d0653eecbdd95de5b711",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 16415168,
        "transactionHash": "0x2e041c278bbd2de1e0c97e9014ae1b5e47698e39a842d0653eecbdd95de5b711",
        "address": "0xdB3BC06d644E4d71731664D3F4bbe1C3c4726bcf",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f5f08ba7f46e2a86b5ef3bfd56c2097c9f4276d7"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xfc281d8e16bf16c0d0be7740f588e1a1f198574775c93d297d3e8b4cfba67264"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 16415168,
        "transactionHash": "0x2e041c278bbd2de1e0c97e9014ae1b5e47698e39a842d0653eecbdd95de5b711",
        "address": "0xdB3BC06d644E4d71731664D3F4bbe1C3c4726bcf",
        "topics": [
          "0xf43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a",
          "0x000000000000000000000000db3bc06d644e4d71731664d3f4bbe1c3c4726bcf"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000057e40",
        "logIndex": 1,
        "blockHash": "0xfc281d8e16bf16c0d0be7740f588e1a1f198574775c93d297d3e8b4cfba67264"
      }
    ],
    "blockNumber": 16415168,
    "cumulativeGasUsed": "1403870",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "AxialHerculesYakAdapterV0",
    "0xa0f6397FEBB03021F9BeF25134DE79835a24D76e",
    360000
  ],
  "solcInputHash": "394e227962a09ee73079d9b1f853e83e",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_swapGasEstimate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newEstimate\",\"type\":\"uint256\"}],\"name\":\"UpdatedGasEstimate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"YakAdapterSwap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"indentifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPoolToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"query\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_estimate\",\"type\":\"uint256\"}],\"name\":\"setSwapGasEstimate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapGasEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverAVAX(uint256)\":{\"params\":{\"_amount\":\"amount\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"_tokenAddress\":\"token address\",\"_tokenAmount\":\"amount to recover\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeAllowance(address,address)\":{\"params\":{\"_spender\":\"address\",\"_token\":\"address\"}},\"setAllowances()\":{\"details\":\"Should use modifier `onlyOwner` to avoid griefing\"},\"swap(uint256,uint256,address,address,address)\":{\"params\":{\"_amountIn\":\"input amount in starting token\",\"_amountOut\":\"amount out in ending token\",\"_fromToken\":\"ERC20 token being sold\",\"_to\":\"address where swapped funds should be sent to\",\"_toToken\":\"ERC20 token being bought\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"recoverAVAX(uint256)\":{\"notice\":\"Recover AVAX from contract\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"revokeAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"setAllowances()\":{\"notice\":\"Approve tokens for use in Strategy\"},\"swap(uint256,uint256,address,address,address)\":{\"notice\":\"Execute a swap from token to token assuming this contract already holds input tokensInteract through the router\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/adapters/CurveLikeAdapter.sol\":\"CurveLikeAdapter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/YakAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\r\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\r\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\r\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\r\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\r\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\r\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\r\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\r\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\r\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\r\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\r\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\r\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\r\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\r\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\r\\n//                              \\r\\n\\r\\n// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity >=0.7.0;\\r\\n\\r\\nimport \\\"./interface/IERC20.sol\\\";\\r\\nimport \\\"./interface/IWETH.sol\\\";\\r\\nimport \\\"./lib/SafeERC20.sol\\\";\\r\\nimport \\\"./lib/Ownable.sol\\\";\\r\\n\\r\\nabstract contract YakAdapter is Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    event YakAdapterSwap(\\r\\n        address indexed _tokenFrom, \\r\\n        address indexed _tokenTo, \\r\\n        uint _amountIn, \\r\\n        uint _amountOut\\r\\n    );\\r\\n\\r\\n    event UpdatedGasEstimate(\\r\\n        address indexed _adapter,\\r\\n        uint _newEstimate\\r\\n    );\\r\\n\\r\\n    event Recovered(\\r\\n        address indexed _asset, \\r\\n        uint amount\\r\\n    );\\r\\n\\r\\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\r\\n    address internal constant AVAX = address(0);\\r\\n    uint internal constant UINT_MAX = type(uint).max;\\r\\n\\r\\n    uint public swapGasEstimate;\\r\\n    string public name;\\r\\n\\r\\n    function setSwapGasEstimate(uint _estimate) public onlyOwner {\\r\\n        swapGasEstimate = _estimate;\\r\\n        emit UpdatedGasEstimate(address(this), _estimate);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Revoke token allowance\\r\\n     * @param _token address\\r\\n     * @param _spender address\\r\\n     */\\r\\n    function revokeAllowance(address _token, address _spender) external onlyOwner {\\r\\n        IERC20(_token).safeApprove(_spender, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Recover ERC20 from contract\\r\\n     * @param _tokenAddress token address\\r\\n     * @param _tokenAmount amount to recover\\r\\n     */\\r\\n    function recoverERC20(address _tokenAddress, uint _tokenAmount) external onlyOwner {\\r\\n        require(_tokenAmount > 0, 'YakAdapter: Nothing to recover');\\r\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\\r\\n        emit Recovered(_tokenAddress, _tokenAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Recover AVAX from contract\\r\\n     * @param _amount amount\\r\\n     */\\r\\n    function recoverAVAX(uint _amount) external onlyOwner {\\r\\n        require(_amount > 0, 'YakAdapter: Nothing to recover');\\r\\n        payable(msg.sender).transfer(_amount);\\r\\n        emit Recovered(address(0), _amount);\\r\\n    }\\r\\n\\r\\n    function query(\\r\\n        uint _amountIn, \\r\\n        address _tokenIn, \\r\\n        address _tokenOut\\r\\n    ) external view returns (uint) {\\r\\n        return _query(\\r\\n            _amountIn, \\r\\n            _tokenIn, \\r\\n            _tokenOut\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Execute a swap from token to token assuming this contract already holds input tokens\\r\\n     * @notice Interact through the router\\r\\n     * @param _amountIn input amount in starting token\\r\\n     * @param _amountOut amount out in ending token\\r\\n     * @param _fromToken ERC20 token being sold\\r\\n     * @param _toToken ERC20 token being bought\\r\\n     * @param _to address where swapped funds should be sent to\\r\\n     */\\r\\n    function swap(\\r\\n        uint _amountIn, \\r\\n        uint _amountOut,\\r\\n        address _fromToken, \\r\\n        address _toToken, \\r\\n        address _to\\r\\n    ) external {\\r\\n        _approveIfNeeded(_fromToken, _amountIn);\\r\\n        _swap(_amountIn, _amountOut, _fromToken, _toToken, _to);\\r\\n        emit YakAdapterSwap(\\r\\n            _fromToken, \\r\\n            _toToken,\\r\\n            _amountIn, \\r\\n            _amountOut \\r\\n        );\\r\\n    } \\r\\n\\r\\n    /**\\r\\n     * @notice Return expected funds to user\\r\\n     * @dev Skip if funds should stay in the contract\\r\\n     * @param _token address\\r\\n     * @param _amount tokens to return\\r\\n     * @param _to address where funds should be sent to\\r\\n     */\\r\\n    function _returnTo(address _token, uint _amount, address _to) internal {\\r\\n        if (address(this)!=_to) {\\r\\n            IERC20(_token).safeTransfer(_to, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Wrap AVAX\\r\\n     * @param _amount amount\\r\\n     */\\r\\n    function _wrap(uint _amount) internal {\\r\\n        IWETH(WAVAX).deposit{value: _amount}();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Unwrap WAVAX\\r\\n     * @param _amount amount\\r\\n     */\\r\\n    function _unwrap(uint _amount) internal {\\r\\n        IWETH(WAVAX).withdraw(_amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal implementation of a swap\\r\\n     * @dev Must return tokens to address(this)\\r\\n     * @dev Wrapping is handled external to this function\\r\\n     * @param _amountIn amount being sold\\r\\n     * @param _amountOut amount being bought\\r\\n     * @param _fromToken ERC20 token being sold\\r\\n     * @param _toToken ERC20 token being bought\\r\\n     * @param _to Where recieved tokens are sent to\\r\\n     */\\r\\n    function _swap(\\r\\n        uint _amountIn, \\r\\n        uint _amountOut, \\r\\n        address _fromToken, \\r\\n        address _toToken, \\r\\n        address _to\\r\\n    ) internal virtual;\\r\\n\\r\\n    function _query(\\r\\n        uint _amountIn,\\r\\n        address _tokenIn, \\r\\n        address _tokenOut\\r\\n    ) internal virtual view returns (uint);\\r\\n\\r\\n    /**\\r\\n     * @notice Approve tokens for use in Strategy\\r\\n     * @dev Should use modifier `onlyOwner` to avoid griefing\\r\\n     */\\r\\n    function setAllowances() public virtual;\\r\\n\\r\\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal virtual;\\r\\n\\r\\n    receive() external payable {}\\r\\n}\",\"keccak256\":\"0x6c94ddac10babacb9344c1f49f4bf8700a1620f40e58aa600180ddce8453cc9d\",\"license\":\"GPL-3.0-only\"},\"contracts/adapters/CurveLikeAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\r\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\r\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\r\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\r\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\r\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\r\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\r\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\r\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\r\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\r\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\r\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\r\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\r\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\r\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\r\\n//                              \\r\\n\\r\\n// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity >=0.7.0;\\r\\n\\r\\nimport \\\"../interface/ICurveLikePool.sol\\\";\\r\\nimport \\\"../interface/IERC20.sol\\\";\\r\\nimport \\\"../interface/IWETH.sol\\\";\\r\\nimport \\\"../lib/SafeERC20.sol\\\";\\r\\nimport \\\"../YakAdapter.sol\\\";\\r\\n\\r\\ncontract CurveLikeAdapter is YakAdapter {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    bytes32 public constant indentifier = keccak256(\\\"CurvelikeAdapter\\\");\\r\\n    mapping (address => bool) public isPoolToken;\\r\\n    mapping (address => uint8) public tokenIndex;\\r\\n    address public pool;\\r\\n\\r\\n    constructor (\\r\\n        string memory _name, \\r\\n        address _pool, \\r\\n        uint _swapGasEstimate\\r\\n    ) {\\r\\n        pool = _pool;\\r\\n        name = _name;\\r\\n        setSwapGasEstimate(_swapGasEstimate);\\r\\n        _setPoolTokens();\\r\\n    }\\r\\n\\r\\n    // Mapping indicator which tokens are included in the pool \\r\\n    function _setPoolTokens() internal {\\r\\n        for (uint8 i=0; true; i++) {\\r\\n            try ICurveLikePool(pool).getToken(i) returns (address token) {\\r\\n                isPoolToken[token] = true;\\r\\n                tokenIndex[token] = i;\\r\\n            } catch {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setAllowances() public override onlyOwner {}\\r\\n\\r\\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal override {\\r\\n        uint allowance = IERC20(_tokenIn).allowance(address(this), pool);\\r\\n        if (allowance < _amount) {\\r\\n            IERC20(_tokenIn).safeApprove(pool, UINT_MAX);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _query(\\r\\n        uint _amountIn, \\r\\n        address _tokenIn, \\r\\n        address _tokenOut\\r\\n    ) internal override view returns (uint) {\\r\\n        if (\\r\\n            !isPoolToken[_tokenIn] || \\r\\n            !isPoolToken[_tokenOut] ||\\r\\n            _tokenIn == _tokenOut ||\\r\\n            _amountIn == 0 ||\\r\\n            ICurveLikePool(pool).paused()\\r\\n        ) { return 0; }\\r\\n        try ICurveLikePool(pool).calculateSwap(\\r\\n            tokenIndex[_tokenIn], \\r\\n            tokenIndex[_tokenOut], \\r\\n            _amountIn\\r\\n        ) returns (uint amountOut) {\\r\\n            return amountOut;\\r\\n        } catch {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _swap(\\r\\n        uint _amountIn, \\r\\n        uint _amountOut, \\r\\n        address _tokenIn, \\r\\n        address _tokenOut, \\r\\n        address _to\\r\\n    ) internal override {\\r\\n        // Note that unsupported token will return index 0 which is valid\\r\\n        ICurveLikePool(pool).swap(\\r\\n            tokenIndex[_tokenIn], \\r\\n            tokenIndex[_tokenOut], \\r\\n            _amountIn, \\r\\n            _amountOut, \\r\\n            block.timestamp\\r\\n        );\\r\\n        // Confidently transfer amount-out\\r\\n        _returnTo(_tokenOut, _amountOut, _to);\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0xd4ef5908d44ced20cb2c4b663cd190dbcef570490a7f9b895ea906a26b8c2faa\",\"license\":\"GPL-3.0-only\"},\"contracts/interface/ICurveLikePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.7.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface ICurveLikePool {\\r\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\r\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\r\\n    function getToken(uint8 index) external view returns (address);\\r\\n    function getVirtualPrice() external view returns (uint256);\\r\\n    function owner() external view returns (address);\\r\\n    function paused() external view returns (bool);\\r\\n    function calculateSwap(\\r\\n        uint8 tokenIndexFrom,\\r\\n        uint8 tokenIndexTo,\\r\\n        uint256 dx\\r\\n    ) external view returns (uint256);\\r\\n    function unpause() external;\\r\\n    function pause() external;\\r\\n    function swap(\\r\\n        uint8 tokenIndexFrom,\\r\\n        uint8 tokenIndexTo,\\r\\n        uint256 dx,\\r\\n        uint256 minDy,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256);\\r\\n}\",\"keccak256\":\"0x0d007d77dd65539c614aebcf5af08a91905ec221336c598288d4022ece3afc17\",\"license\":\"MIT\"},\"contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.7.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(address,address,uint);\\r\\n    event Transfer(address,address,uint);\\r\\n    function name() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function transferFrom(address,address,uint) external returns (bool);\\r\\n    function allowance(address,address) external view returns (uint);\\r\\n    function approve(address,uint) external returns (bool);\\r\\n    function transfer(address,uint) external returns (bool);\\r\\n    function balanceOf(address) external view returns (uint);\\r\\n    function nonces(address) external view returns (uint);  // Only tokens that support permit\\r\\n    function permit(address,address,uint256,uint256,uint8,bytes32,bytes32) external;  // Only tokens that support permit\\r\\n    function swap(address,uint256) external;  // Only Avalanche bridge tokens \\r\\n    function swapSupply(address) external view returns (uint);  // Only Avalanche bridge tokens \\r\\n}\",\"keccak256\":\"0x563f98d9f51b480df4dd217160dd4194704b29731eb20f247d7866bdf963632b\",\"license\":\"MIT\"},\"contracts/interface/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.7.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IWETH is IERC20 {\\r\\n    function withdraw(uint256 amount) external;\\r\\n    function deposit() external payable;\\r\\n}\",\"keccak256\":\"0xc6ed1199305b1c3722443c9d389b17706ec96cc23635ea80e136eb3b696b9004\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.7.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return payable(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfdae80dba5578cc62c14c07273d2fac7a14287518d2b931261ad405a2b3d9656\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.7.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: Caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: New owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc980810e17f9264715a68df22f03440c7e4e629ac0669fe56ce3459c6624a66b\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// This is a simplified version of OpenZepplin's SafeERC20 library\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.7.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../interface/IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves.\\r\\n\\r\\n        // A Solidity high level call has three parts:\\r\\n        //  1. The target address is checked to verify it contains contract code\\r\\n        //  2. The call itself is made, and success asserted\\r\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\r\\n        // solhint-disable-next-line max-line-length\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = address(token).call(data);\\r\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\r\\n\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x40205e1f2d8ec4db9ecebdec81db8444a4a3ba86d013fa25653fffbfbe0d422f\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.7.0;\\r\\n\\r\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x + y) >= x, 'SafeMath: ds-math-add-overflow');\\r\\n    }\\r\\n\\r\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x - y) <= x, 'SafeMath: ds-math-sub-underflow');\\r\\n    }\\r\\n\\r\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y == 0 || (z = x * y) / y == x, 'SafeMath: ds-math-mul-overflow');\\r\\n    }\\r\\n}\",\"keccak256\":\"0x11ccd1f76acabef8ab9615c92e191536b64cac4514b8d8da117b0c6076d20c2e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200172738038062001727833981810160405260608110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b506040908152602082015191015190925090506000620001056200019e565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600580546001600160a01b0319166001600160a01b03841617905582516200017f90600290602086019062000331565b506200018b81620001a2565b6200019562000259565b505050620003dd565b3390565b620001ac6200019e565b6001600160a01b0316620001bf62000322565b6001600160a01b0316146200021b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600181905560408051828152905130917ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a919081900360200190a250565b60005b6005546040805162415c3360e91b815260ff8416600482015290516001600160a01b03909216916382b8660091602480820192602092909190829003018186803b158015620002aa57600080fd5b505afa925050508015620002d157506040513d6020811015620002cc57600080fd5b505160015b620002dc576200031f565b6001600160a01b031660009081526003602090815260408083208054600160ff19918216811790925560049093529220805490911660ff8416179055016200025c565b50565b6000546001600160a01b031690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620003695760008555620003b4565b82601f106200038457805160ff1916838001178555620003b4565b82800160010185558215620003b4579182015b82811115620003b457825182559160200191906001019062000397565b50620003c2929150620003c6565b5090565b5b80821115620003c25760008155600101620003c7565b61133a80620003ed6000396000f3fe6080604052600436106100f75760003560e01c806384a33e631161008a578063de260f3711610059578063de260f371461034c578063eab90da614610393578063ef99893a146103e4578063f2fde38b14610425576100fe565b806384a33e63146102bf5780638980f11f146102e95780638da5cb5b14610322578063dbd9a4d414610337576100fe565b80634ebb7916116100c65780634ebb79161461022e57806369cff80d1461025a578063715018a61461026f5780637ae2677314610284576100fe565b806306fdde03146101035780630fef1c061461018d57806316f0115b146101b4578063427f91a6146101e5576100fe565b366100fe57005b600080fd5b34801561010f57600080fd5b50610118610458565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015257818101518382015260200161013a565b50505050905090810190601f16801561017f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019957600080fd5b506101a26104e3565b60408051918252519081900360200190f35b3480156101c057600080fd5b506101c9610507565b604080516001600160a01b039092168252519081900360200190f35b3480156101f157600080fd5b506102186004803603602081101561020857600080fd5b50356001600160a01b0316610516565b6040805160ff9092168252519081900360200190f35b34801561023a57600080fd5b506102586004803603602081101561025157600080fd5b503561052b565b005b34801561026657600080fd5b506101a261065c565b34801561027b57600080fd5b50610258610662565b34801561029057600080fd5b50610258600480360360408110156102a757600080fd5b506001600160a01b038135811691602001351661072d565b3480156102cb57600080fd5b50610258600480360360208110156102e257600080fd5b50356107ba565b3480156102f557600080fd5b506102586004803603604081101561030c57600080fd5b506001600160a01b03813516906020013561086c565b34801561032e57600080fd5b506101c961098c565b34801561034357600080fd5b5061025861099b565b34801561035857600080fd5b5061037f6004803603602081101561036f57600080fd5b50356001600160a01b0316610a11565b604080519115158252519081900360200190f35b34801561039f57600080fd5b50610258600480360360a08110156103b657600080fd5b508035906020810135906001600160a01b036040820135811691606081013582169160809091013516610a26565b3480156103f057600080fd5b506101a26004803603606081101561040757600080fd5b508035906001600160a01b0360208201358116916040013516610a97565b34801561043157600080fd5b506102586004803603602081101561044857600080fd5b50356001600160a01b0316610aae565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156104db5780601f106104b0576101008083540402835291602001916104db565b820191906000526020600020905b8154815290600101906020018083116104be57829003601f168201915b505050505081565b7f3ad79a287bc781280a436df283c490150f8df078cbfa78807ed7784f1994401a81565b6005546001600160a01b031681565b60046020526000908152604090205460ff1681565b610533610bcf565b6001600160a01b031661054461098c565b6001600160a01b03161461059f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600081116105f4576040805162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f7665720000604482015290519081900360640190fd5b604051339082156108fc029083906000818181858888f19350505050158015610621573d6000803e3d6000fd5b506040805182815290516000917f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28919081900360200190a250565b60015481565b61066a610bcf565b6001600160a01b031661067b61098c565b6001600160a01b0316146106d6576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b610735610bcf565b6001600160a01b031661074661098c565b6001600160a01b0316146107a1576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6107b66001600160a01b038316826000610bd3565b5050565b6107c2610bcf565b6001600160a01b03166107d361098c565b6001600160a01b03161461082e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600181905560408051828152905130917ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a919081900360200190a250565b610874610bcf565b6001600160a01b031661088561098c565b6001600160a01b0316146108e0576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60008111610935576040805162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f7665720000604482015290519081900360640190fd5b6109496001600160a01b0383163383610d08565b6040805182815290516001600160a01b038416917f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28919081900360200190a25050565b6000546001600160a01b031690565b6109a3610bcf565b6001600160a01b03166109b461098c565b6001600160a01b031614610a0f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b565b60036020526000908152604090205460ff1681565b610a308386610d27565b610a3d8585858585610dcd565b816001600160a01b0316836001600160a01b03167fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa8787604051808381526020018281526020019250505060405180910390a35050505050565b6000610aa4848484610ead565b90505b9392505050565b610ab6610bcf565b6001600160a01b0316610ac761098c565b6001600160a01b031614610b22576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116610b675760405162461bcd60e51b81526004018080602001828103825260268152602001806112df6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b3390565b801580610c5b5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90610c0990309086906004016111bc565b60206040518083038186803b158015610c2157600080fd5b505afa158015610c35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c59919061116b565b155b610c805760405162461bcd60e51b8152600401610c7790611281565b60405180910390fd5b610d038363095ea7b360e01b8484604051602401610c9f9291906111d6565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261106b565b505050565b610d038363a9059cbb60e01b8484604051602401610c9f9291906111d6565b60055460408051636eb1769f60e11b81523060048201526001600160a01b039283166024820152905160009285169163dd62ed3e916044808301926020929190829003018186803b158015610d7b57600080fd5b505afa158015610d8f573d6000803e3d6000fd5b505050506040513d6020811015610da557600080fd5b5051905081811015610d0357600554610d03906001600160a01b038581169116600019610bd3565b6005546001600160a01b0384811660009081526004602081815260408084205488861685528185205482517f9169558600000000000000000000000000000000000000000000000000000000815260ff92831695810195909552166024840152604483018b9052606483018a905242608484015251939094169363916955869360a48084019492939192918390030190829087803b158015610e6e57600080fd5b505af1158015610e82573d6000803e3d6000fd5b505050506040513d6020811015610e9857600080fd5b50610ea69050828583611127565b5050505050565b6001600160a01b03821660009081526003602052604081205460ff161580610eee57506001600160a01b03821660009081526003602052604090205460ff16155b80610f0a5750816001600160a01b0316836001600160a01b0316145b80610f13575083155b80610f945750600560009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f6757600080fd5b505afa158015610f7b573d6000803e3d6000fd5b505050506040513d6020811015610f9157600080fd5b50515b15610fa157506000610aa7565b6005546001600160a01b038481166000908152600460208181526040808420548886168552938190205481517fa95b089f00000000000000000000000000000000000000000000000000000000815260ff958616948101949094529093166024830152604482018990529151929093169263a95b089f9260648083019392829003018186803b15801561103357600080fd5b505afa92505050801561105857506040513d602081101561105357600080fd5b505160015b61106457506000610aa7565b9050610aa7565b600080836001600160a01b0316836040516110869190611183565b6000604051808303816000865af19150503d80600081146110c3576040519150601f19603f3d011682016040523d82523d6000602084013e6110c8565b606091505b5091509150816110ea5760405162461bcd60e51b8152600401610c77906111ef565b8051156111215780806020019051810190611105919061114b565b6111215760405162461bcd60e51b8152600401610c7790611224565b50505050565b306001600160a01b03821614610d0357610d036001600160a01b0384168284610d08565b60006020828403121561115c578081fd5b81518015158114610aa7578182fd5b60006020828403121561117c578081fd5b5051919050565b60008251815b818110156111a35760208186018101518583015201611189565b818111156111b15782828501525b509190910192915050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060608201526080019056fe4f776e61626c653a204e6577206f776e657220697320746865207a65726f2061646472657373a26469706673582212203c61f04e4c5d6f7b6358f927a6d5dd0b7c049be15d07189f174fd3fe8a6e9b1464736f6c63430007060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverAVAX(uint256)": {
        "params": {
          "_amount": "amount"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "_tokenAddress": "token address",
          "_tokenAmount": "amount to recover"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeAllowance(address,address)": {
        "params": {
          "_spender": "address",
          "_token": "address"
        }
      },
      "setAllowances()": {
        "details": "Should use modifier `onlyOwner` to avoid griefing"
      },
      "swap(uint256,uint256,address,address,address)": {
        "params": {
          "_amountIn": "input amount in starting token",
          "_amountOut": "amount out in ending token",
          "_fromToken": "ERC20 token being sold",
          "_to": "address where swapped funds should be sent to",
          "_toToken": "ERC20 token being bought"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "recoverAVAX(uint256)": {
        "notice": "Recover AVAX from contract"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "revokeAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "setAllowances()": {
        "notice": "Approve tokens for use in Strategy"
      },
      "swap(uint256,uint256,address,address,address)": {
        "notice": "Execute a swap from token to token assuming this contract already holds input tokensInteract through the router"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6598,
        "contract": "contracts/adapters/CurveLikeAdapter.sol:CurveLikeAdapter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2304,
        "contract": "contracts/adapters/CurveLikeAdapter.sol:CurveLikeAdapter",
        "label": "swapGasEstimate",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2306,
        "contract": "contracts/adapters/CurveLikeAdapter.sol:CurveLikeAdapter",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3285,
        "contract": "contracts/adapters/CurveLikeAdapter.sol:CurveLikeAdapter",
        "label": "isPoolToken",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3289,
        "contract": "contracts/adapters/CurveLikeAdapter.sol:CurveLikeAdapter",
        "label": "tokenIndex",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint8)"
      },
      {
        "astId": 3291,
        "contract": "contracts/adapters/CurveLikeAdapter.sol:CurveLikeAdapter",
        "label": "pool",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}