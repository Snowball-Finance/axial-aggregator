{
  "address": "0x547730f642913E50ad8B2Db2dE9F3479E8015BC1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_adapters",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_trustedTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_feeClaimer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "name": "AxialSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_newAdapters",
          "type": "address[]"
        }
      ],
      "name": "UpdatedAdapters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldFeeClaimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newFeeClaimer",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeClaimer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_oldMinFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newMinFee",
          "type": "uint256"
        }
      ],
      "name": "UpdatedMinFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_newTrustedTokens",
          "type": "address[]"
        }
      ],
      "name": "UpdatedTrustedTokens",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ADAPTERS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AVAX",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_CLAIMER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "TRUSTED_TOKENS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WAVAX",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adaptersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxSteps",
          "type": "uint256"
        }
      ],
      "name": "findBestPath",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            }
          ],
          "internalType": "struct AxialRouter.FormattedOffer",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxSteps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenOutPrice",
          "type": "uint256"
        }
      ],
      "name": "findBestPathWithGas",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "gasEstimate",
              "type": "uint256"
            }
          ],
          "internalType": "struct AxialRouter.FormattedOfferWithGas",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdapters",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        }
      ],
      "name": "queryAdapter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint8[]",
          "name": "_options",
          "type": "uint8[]"
        }
      ],
      "name": "queryNoSplit",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "adapter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            }
          ],
          "internalType": "struct AxialRouter.Query",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "queryNoSplit",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "adapter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            }
          ],
          "internalType": "struct AxialRouter.Query",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_adapters",
          "type": "address[]"
        }
      ],
      "name": "setAdapters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        }
      ],
      "name": "setFeeClaimer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_trustedTokens",
          "type": "address[]"
        }
      ],
      "name": "setTrustedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            }
          ],
          "internalType": "struct AxialRouter.Trade",
          "name": "_trade",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "swapNoSplit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            }
          ],
          "internalType": "struct AxialRouter.Trade",
          "name": "_trade",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "swapNoSplitFromAVAX",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            }
          ],
          "internalType": "struct AxialRouter.Trade",
          "name": "_trade",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "swapNoSplitToAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            }
          ],
          "internalType": "struct AxialRouter.Trade",
          "name": "_trade",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "swapNoSplitToAVAXWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            }
          ],
          "internalType": "struct AxialRouter.Trade",
          "name": "_trade",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "swapNoSplitWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedTokensCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa90bacee70326f7f3d3cfe6bfaa1884b15324d092037940e9a6a6948cdd4e31a",
  "receipt": {
    "to": null,
    "from": "0x8486662EafB15d77d4fA128146F3620C78e5F226",
    "contractAddress": "0x547730f642913E50ad8B2Db2dE9F3479E8015BC1",
    "transactionIndex": 0,
    "gasUsed": "4219645",
    "logsBloom": "0x00000000000000000000001000000000000000000000000020800000000000400000000000000060004000008080000000100000000000000000000000200000000080004000000000000000200000000001000000000000000000000000000000000010020000000000000000000800000000020000000000001000000000400000000000000000000000000000000000000000000100000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000001000000000000000000000000080102000020000014000000000000000000400000000000000008000000000000000000000000",
    "blockHash": "0x8ece0a417f284954935d052ea09655a6271bb760c5b9c9f506d2a52f5c6060b6",
    "transactionHash": "0xa90bacee70326f7f3d3cfe6bfaa1884b15324d092037940e9a6a6948cdd4e31a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10975408,
        "transactionHash": "0xa90bacee70326f7f3d3cfe6bfaa1884b15324d092037940e9a6a6948cdd4e31a",
        "address": "0x547730f642913E50ad8B2Db2dE9F3479E8015BC1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008486662eafb15d77d4fa128146f3620c78e5f226"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8ece0a417f284954935d052ea09655a6271bb760c5b9c9f506d2a52f5c6060b6"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10975408,
        "transactionHash": "0xa90bacee70326f7f3d3cfe6bfaa1884b15324d092037940e9a6a6948cdd4e31a",
        "address": "0x547730f642913E50ad8B2Db2dE9F3479E8015BC1",
        "topics": [
          "0x658ff1688002926d8f426cb10c052ec29003f50042df9652d8613484c1a58647"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66c700000000000000000000000049d5c2bdffac6ce2bfdb6640f4f80f226bc10bab000000000000000000000000c7198437980c041c805a1edcba50c1ce5db95118000000000000000000000000a7d7079b0fead91f3e65f86e8915cb59c1a4c6640000000000000000000000006e84a6216ea6dacc71ee8e6b0a5b7322eebc0fdd000000000000000000000000d586e7f844cea2f87f50152665bcbc2c279d8d700000000000000000000000005947bb275c521040051d82396192181b413227a300000000000000000000000050b7545627a5162f82a992c33b87adc75187b218000000000000000000000000130966628846bfd36ff31a822705796e8cb8c18d00000000000000000000000060781c2586d68229fde47564546784ab3faca98200000000000000000000000059414b3089ce2af0010e7523dea7e2b35d776ec7",
        "logIndex": 1,
        "blockHash": "0x8ece0a417f284954935d052ea09655a6271bb760c5b9c9f506d2a52f5c6060b6"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10975408,
        "transactionHash": "0xa90bacee70326f7f3d3cfe6bfaa1884b15324d092037940e9a6a6948cdd4e31a",
        "address": "0x547730f642913E50ad8B2Db2dE9F3479E8015BC1",
        "topics": [
          "0xb2c853ac4d80d18d058c43d8018d077a036e542a79acae1647f5ad2a8c76f4e2"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000008486662eafb15d77d4fa128146f3620c78e5f226",
        "logIndex": 2,
        "blockHash": "0x8ece0a417f284954935d052ea09655a6271bb760c5b9c9f506d2a52f5c6060b6"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10975408,
        "transactionHash": "0xa90bacee70326f7f3d3cfe6bfaa1884b15324d092037940e9a6a6948cdd4e31a",
        "address": "0x547730f642913E50ad8B2Db2dE9F3479E8015BC1",
        "topics": [
          "0xebf7325f48e05e5e38809c69f8b02a7c907ed31d8768e6c2d841b1296a9225fe"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000210000000000000000000000003614657edc3cb90ba420e5f4f61679777e4974e30000000000000000000000003f314530a4964acca1f20dad2d35275c23ed7f5d00000000000000000000000010ef2400d1a7f64017e80669b218f30ca9816e22000000000000000000000000592e3d359e4a8ed5f08f38806b1b7f70aa3db4f2000000000000000000000000599610cf20379b5d21a4a3ea84cb76e0f2a5f70f0000000000000000000000001276350e5855b2bcd089722a678c7d16f3ab5923000000000000000000000000b2e51d2e2b85dbbe8c758c753b5bda3f86af05e40000000000000000000000002bc16c1d9a5e6af362277ed424130cc6b2dde2d9000000000000000000000000db66686ac8bea67400cf9e5dd6c8849575b90148000000000000000000000000d311f964dd5bb5ecbd971592e845b0fb74c98b39000000000000000000000000afb5ae9934266a131f44f2a80c783d6a827a3d1a0000000000000000000000009a76d67e67ae285856846c2fa080adece60cfc9a0000000000000000000000006e73f353e4ae3e5005daad619f22d7c7b790c4f3000000000000000000000000273fca9cd4c4873efc303b0b61b5e5cb35cd9a700000000000000000000000005bacf41d5d6b16183c2b980bce0fbbe5ea125d2f000000000000000000000000c3bee4623a7ae76ca0805078e98069debf79e826000000000000000000000000fe6bb940be3f8e42ece2382ebb0a1ea21eb1420d000000000000000000000000e12424c3a50f50aed8b7e906703bb1ce93d7edc8000000000000000000000000c362eafaa85728893a0d1084d3e2ff7ffdf2ff8800000000000000000000000055debf770fc61c8dd9de4f4a2d90606f3e906b2e0000000000000000000000005f902030c8aeb8578ac5cc624e243a27b05491c60000000000000000000000005302aedd1b484fbe70efd91ca0c40785f5b4a69d000000000000000000000000e3a90b2dd476edb58462971d51579000654be8f500000000000000000000000034fc9f887653b0c1257db721e413177879004973000000000000000000000000e102e501520aeabcde449449d25283b707aa28e900000000000000000000000077fc17d927ebceaea2c4704bab1aeebb0547ea420000000000000000000000008abfd1396465fe7ee22408750123794413e82b02000000000000000000000000d0f6e66113a6d6cca238371948f4ce2893d62881000000000000000000000000bc6e1510f2f5c5028b5e43ff7175d89223ba243c000000000000000000000000491dc06178caf5b962db53576a8a1456a84762320000000000000000000000000c138d9a8ebb09fcadf540578add307752383fc000000000000000000000000078ca6ab867664cae279fbf0c1099f743d200d5c50000000000000000000000008cc0470f6d53cd1bdc7a54b7dd4fff0d724e47f4",
        "logIndex": 3,
        "blockHash": "0x8ece0a417f284954935d052ea09655a6271bb760c5b9c9f506d2a52f5c6060b6"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10975408,
        "transactionHash": "0xa90bacee70326f7f3d3cfe6bfaa1884b15324d092037940e9a6a6948cdd4e31a",
        "address": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000547730f642913e50ad8b2db2de9f3479e8015bc1",
          "0x000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66c7"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 4,
        "blockHash": "0x8ece0a417f284954935d052ea09655a6271bb760c5b9c9f506d2a52f5c6060b6"
      }
    ],
    "blockNumber": 10975408,
    "cumulativeGasUsed": "4219645",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x3614657EDc3cb90BA420E5f4F61679777e4974E3",
      "0x3f314530a4964acCA1f20dad2D35275C23Ed7F5d",
      "0x10EF2400d1a7f64017e80669B218f30ca9816e22",
      "0x592E3D359E4A8Ed5f08f38806B1b7f70AA3DB4F2",
      "0x599610cf20379B5D21A4A3Ea84CB76E0F2a5f70f",
      "0x1276350e5855B2BCD089722a678C7D16f3ab5923",
      "0xb2e51D2E2B85DbbE8C758C753b5BdA3f86Af05E4",
      "0x2BC16C1D9A5E6af362277ED424130cC6b2DDe2D9",
      "0xDB66686Ac8bEA67400CF9E5DD6c8849575B90148",
      "0xd311F964Dd5bb5ecBd971592E845b0fb74c98b39",
      "0xaFb5aE9934266a131F44F2A80c783d6a827A3d1a",
      "0x9a76D67e67aE285856846C2Fa080adEcE60CfC9A",
      "0x6E73F353e4AE3E5005daaD619F22D7C7B790c4f3",
      "0x273FcA9cd4C4873EFC303b0b61b5E5CB35CD9A70",
      "0x5BaCF41D5D6B16183c2B980BcE0FbbE5ea125d2F",
      "0xC3BEe4623A7aE76Ca0805078e98069DEbF79E826",
      "0xFE6BB940bE3F8e42ece2382EBb0A1Ea21eb1420d",
      "0xE12424c3A50f50aeD8b7e906703Bb1CE93d7EDC8",
      "0xc362eaFAa85728893a0d1084D3e2Ff7ffDF2fF88",
      "0x55deBF770FC61C8DD9DE4F4A2d90606F3e906B2e",
      "0x5f902030C8AEb8578aC5CC624E243a27b05491c6",
      "0x5302AedD1b484fBe70EFd91Ca0C40785f5B4A69d",
      "0xE3A90B2DD476EdB58462971d51579000654BE8F5",
      "0x34Fc9F887653B0C1257dB721e413177879004973",
      "0xE102e501520AEABCDe449449D25283b707Aa28E9",
      "0x77fc17D927eBcEaEA2c4704BaB1AEebB0547ea42",
      "0x8Abfd1396465fE7ee22408750123794413E82B02",
      "0xd0f6e66113A6D6Cca238371948F4Ce2893D62881",
      "0xBc6e1510f2f5C5028b5e43fF7175D89223Ba243C",
      "0x491dc06178CAF5b962DB53576a8A1456a8476232",
      "0x0C138d9A8Ebb09fCadF540578Add307752383fc0",
      "0x78cA6aB867664caE279fBF0c1099f743D200D5C5",
      "0x8cC0470f6D53Cd1bdc7A54B7Dd4Fff0D724E47F4"
    ],
    [
      "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
      "0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB",
      "0xc7198437980c041c805A1EDcbA50c1Ce5db95118",
      "0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664",
      "0x6e84a6216eA6dACC71eE8E6b0a5B7322EEbC0fDd",
      "0xd586E7F844cEa2F87f50152665BCbc2C279D8d70",
      "0x5947BB275c521040051D82396192181b413227A3",
      "0x50b7545627a5162F82A992c33b87aDc75187B218",
      "0x130966628846BFd36ff31a822705796e8cb8C18D",
      "0x60781C2586D68229fde47564546784ab3fACA982",
      "0x59414b3089ce2AF0010e7523Dea7E2b35d776ec7"
    ],
    "0x8486662EafB15d77d4fA128146F3620C78e5F226"
  ],
  "solcInputHash": "edf7c8026a528a08f4d63c4a62ce5280",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_adapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_trustedTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_feeClaimer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"AxialSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_newAdapters\",\"type\":\"address[]\"}],\"name\":\"UpdatedAdapters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldFeeClaimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newFeeClaimer\",\"type\":\"address\"}],\"name\":\"UpdatedFeeClaimer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldMinFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMinFee\",\"type\":\"uint256\"}],\"name\":\"UpdatedMinFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_newTrustedTokens\",\"type\":\"address[]\"}],\"name\":\"UpdatedTrustedTokens\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ADAPTERS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AVAX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_CLAIMER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TRUSTED_TOKENS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAVAX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adaptersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxSteps\",\"type\":\"uint256\"}],\"name\":\"findBestPath\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"internalType\":\"struct AxialRouter.FormattedOffer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxSteps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenOutPrice\",\"type\":\"uint256\"}],\"name\":\"findBestPathWithGas\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"gasEstimate\",\"type\":\"uint256\"}],\"internalType\":\"struct AxialRouter.FormattedOfferWithGas\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdapters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"queryAdapter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"_options\",\"type\":\"uint8[]\"}],\"name\":\"queryNoSplit\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"internalType\":\"struct AxialRouter.Query\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"queryNoSplit\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"internalType\":\"struct AxialRouter.Query\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_adapters\",\"type\":\"address[]\"}],\"name\":\"setAdapters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"setFeeClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_trustedTokens\",\"type\":\"address[]\"}],\"name\":\"setTrustedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"internalType\":\"struct AxialRouter.Trade\",\"name\":\"_trade\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"swapNoSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"internalType\":\"struct AxialRouter.Trade\",\"name\":\"_trade\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"swapNoSplitFromAVAX\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"internalType\":\"struct AxialRouter.Trade\",\"name\":\"_trade\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"swapNoSplitToAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"internalType\":\"struct AxialRouter.Trade\",\"name\":\"_trade\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"swapNoSplitToAVAXWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"internalType\":\"struct AxialRouter.Trade\",\"name\":\"_trade\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"swapNoSplitWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"findBestPath(uint256,address,address,uint256)\":{\"notice\":\"Return path with best returns between two tokens\"},\"findBestPathWithGas(uint256,address,address,uint256,uint256,uint256)\":{\"notice\":\"Return path with best returns between two tokens Takes gas-cost into account\"},\"queryAdapter(uint256,address,address,uint8)\":{\"notice\":\"Query single adapter\"},\"queryNoSplit(uint256,address,address)\":{\"notice\":\"Query all adapters\"},\"queryNoSplit(uint256,address,address,uint8[])\":{\"notice\":\"Query specified adapters\"},\"swapNoSplitToAVAXWithPermit((uint256,uint256,address[],address[]),address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Swap token to AVAX without the need to approve the first token\"},\"swapNoSplitWithPermit((uint256,uint256,address[],address[]),address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Swap token to token without the need to approve the first token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AxialRouter.sol\":\"AxialRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/AxialRouter.sol\":{\"content\":\"\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/BytesManipulation.sol\\\";\\nimport \\\"./interface/IAdapter.sol\\\";\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./interface/IWETH.sol\\\";\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\n\\ncontract AxialRouter is Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint;\\n\\n    address public constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n    address public constant AVAX = address(0);\\n    string public constant NAME = 'AxialRouter';\\n    uint public constant FEE_DENOMINATOR = 1e4;\\n    address public FEE_CLAIMER;\\n    address[] public TRUSTED_TOKENS;\\n    address[] public ADAPTERS;\\n\\n    event Recovered(\\n        address indexed _asset, \\n        uint amount\\n    );\\n\\n    event UpdatedTrustedTokens(\\n\\t    address[] _newTrustedTokens\\n    );\\n\\n    event UpdatedAdapters(\\n        address[] _newAdapters\\n    );\\n\\n    event UpdatedMinFee(\\n        uint _oldMinFee,\\n        uint _newMinFee\\n    );\\n\\n    event UpdatedFeeClaimer(\\n        address _oldFeeClaimer, \\n        address _newFeeClaimer \\n    );\\n\\n    event AxialSwap(\\n        address indexed _tokenIn, \\n        address indexed _tokenOut, \\n        uint _amountIn, \\n        uint _amountOut\\n    );\\n\\n    struct Query {\\n        address adapter;\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountOut;\\n    }\\n\\n    struct OfferWithGas {\\n        bytes amounts;\\n        bytes adapters;\\n        bytes path;\\n        uint gasEstimate;\\n    }\\n\\n    struct Offer {\\n        bytes amounts;\\n        bytes adapters;\\n        bytes path;\\n    }\\n\\n    struct FormattedOfferWithGas {\\n        uint[] amounts;\\n        address[] adapters;\\n        address[] path;\\n        uint gasEstimate;\\n    }\\n\\n    struct FormattedOffer {\\n        uint[] amounts;\\n        address[] adapters;\\n        address[] path;\\n    }\\n\\n    struct Trade {\\n        uint amountIn;\\n        uint amountOut;\\n        address[] path;\\n        address[] adapters;\\n    }\\n\\n    constructor(\\n        address[] memory _adapters, \\n        address[] memory _trustedTokens, \\n        address _feeClaimer\\n    ) {\\n        setTrustedTokens(_trustedTokens);\\n        setFeeClaimer(_feeClaimer);\\n        setAdapters(_adapters);\\n        _setAllowances();\\n    }\\n\\n    // -- SETTERS --\\n\\n    function _setAllowances() internal {\\n        IERC20(WAVAX).safeApprove(WAVAX, type(uint).max);\\n    }\\n\\n    function setTrustedTokens(address[] memory _trustedTokens) public onlyOwner {\\n        emit UpdatedTrustedTokens(_trustedTokens);\\n        TRUSTED_TOKENS = _trustedTokens;\\n    }\\n\\n    function setAdapters(address[] memory _adapters) public onlyOwner {\\n        emit UpdatedAdapters(_adapters);\\n        ADAPTERS = _adapters;\\n    }\\n\\n    function setFeeClaimer(address _claimer) public onlyOwner {\\n        emit UpdatedFeeClaimer(FEE_CLAIMER, _claimer);\\n        FEE_CLAIMER = _claimer;\\n    }\\n\\n    //  -- GENERAL --\\n\\n    function trustedTokensCount() external view returns (uint) {\\n        return TRUSTED_TOKENS.length;\\n    }\\n\\n    function adaptersCount() external view returns (uint) {\\n        return ADAPTERS.length;\\n    }\\n\\n    function recoverERC20(address _tokenAddress, uint _tokenAmount) external onlyOwner {\\n        require(_tokenAmount > 0, 'AxialRouter: Nothing to recover');\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\\n        emit Recovered(_tokenAddress, _tokenAmount);\\n    }\\n\\n    function recoverAVAX(uint _amount) external onlyOwner {\\n        require(_amount > 0, 'AxialRouter: Nothing to recover');\\n        payable(msg.sender).transfer(_amount);\\n        emit Recovered(address(0), _amount);\\n    }\\n\\n    function getAdapters() public view returns (address[] memory) {\\n        return ADAPTERS;\\n    }\\n\\n    // Fallback\\n    receive() external payable {}\\n\\n\\n    // -- HELPERS -- \\n\\n    function _applyFee(uint _amountIn, uint _fee) internal pure returns (uint) {\\n        require(_fee > 0, 'AxialRouter: Insufficient fee');\\n        return _amountIn.mul(FEE_DENOMINATOR.sub(_fee))/FEE_DENOMINATOR;\\n    }\\n\\n    function _wrap(uint _amount) internal {\\n        IWETH(WAVAX).deposit{value: _amount}();\\n    }\\n\\n    function _unwrap(uint _amount) internal {\\n        IWETH(WAVAX).withdraw(_amount);\\n    }\\n\\n    /**\\n     * @notice Return tokens to user\\n     * @dev Pass address(0) for AVAX\\n     * @param _token address\\n     * @param _amount tokens to return\\n     * @param _to address where funds should be sent to\\n     */\\n    function _returnTokensTo(address _token, uint _amount, address _to) internal {\\n        if (address(this)!=_to) {\\n            if (_token == AVAX) {\\n                payable(_to).transfer(_amount);\\n            } else {\\n                IERC20(_token).safeTransfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Makes a deep copy of Offer struct\\n     */\\n    function _cloneOffer(\\n        Offer memory _queries\\n    ) internal pure returns (Offer memory) {\\n        return Offer(\\n            _queries.amounts, \\n            _queries.adapters, \\n            _queries.path\\n        );\\n    }\\n\\n    /**\\n     * Makes a deep copy of OfferWithGas struct\\n     */\\n    function _cloneOfferWithGas(\\n        OfferWithGas memory _queries\\n    ) internal pure returns (OfferWithGas memory) {\\n        return OfferWithGas(\\n            _queries.amounts, \\n            _queries.adapters, \\n            _queries.path, \\n            _queries.gasEstimate\\n        );\\n    }\\n\\n    /**\\n     * Appends Query elements to Offer struct\\n     */\\n    function _addQuery(\\n        Offer memory _queries, \\n        uint256 _amount, \\n        address _adapter, \\n        address _tokenOut\\n    ) internal pure {\\n        _queries.path = BytesManipulation.mergeBytes(_queries.path, BytesManipulation.toBytes(_tokenOut));\\n        _queries.amounts = BytesManipulation.mergeBytes(_queries.amounts, BytesManipulation.toBytes(_amount));\\n        _queries.adapters = BytesManipulation.mergeBytes(_queries.adapters, BytesManipulation.toBytes(_adapter));\\n    }\\n\\n    /**\\n     * Appends Query elements to Offer struct\\n     */\\n    function _addQueryWithGas(\\n        OfferWithGas memory _queries, \\n        uint256 _amount, \\n        address _adapter, \\n        address _tokenOut, \\n        uint _gasEstimate\\n    ) internal pure {\\n        _queries.path = BytesManipulation.mergeBytes(_queries.path, BytesManipulation.toBytes(_tokenOut));\\n        _queries.amounts = BytesManipulation.mergeBytes(_queries.amounts, BytesManipulation.toBytes(_amount));\\n        _queries.adapters = BytesManipulation.mergeBytes(_queries.adapters, BytesManipulation.toBytes(_adapter));\\n        _queries.gasEstimate += _gasEstimate;\\n    }\\n\\n    /**\\n     * Converts byte-arrays to an array of integers\\n     */\\n    function _formatAmounts(bytes memory _amounts) internal pure returns (uint256[] memory) {\\n        // Format amounts\\n        uint256 chunks = _amounts.length / 32;\\n        uint256[] memory amountsFormatted = new uint256[](chunks);\\n        for (uint256 i=0; i<chunks; i++) {\\n            amountsFormatted[i] = BytesManipulation.bytesToUint256(i*32+32, _amounts);\\n        }\\n        return amountsFormatted;\\n    }\\n\\n    /**\\n     * Converts byte-array to an array of addresses\\n     */\\n    function _formatAddresses(bytes memory _addresses) internal pure returns (address[] memory) {\\n        uint256 chunks = _addresses.length / 32;\\n        address[] memory addressesFormatted = new address[](chunks);\\n        for (uint256 i=0; i<chunks; i++) {\\n            addressesFormatted[i] = BytesManipulation.bytesToAddress(i*32+32, _addresses);\\n        }\\n        return addressesFormatted;\\n    }\\n\\n    /**\\n     * Formats elements in the Offer object from byte-arrays to integers and addresses\\n     */\\n    function _formatOffer(Offer memory _queries) internal pure returns (FormattedOffer memory) {\\n        return FormattedOffer(\\n            _formatAmounts(_queries.amounts), \\n            _formatAddresses(_queries.adapters), \\n            _formatAddresses(_queries.path)\\n        );\\n    }\\n\\n    /**\\n     * Formats elements in the Offer object from byte-arrays to integers and addresses\\n     */\\n    function _formatOfferWithGas(OfferWithGas memory _queries) internal pure returns (FormattedOfferWithGas memory) {\\n        return FormattedOfferWithGas(\\n            _formatAmounts(_queries.amounts), \\n            _formatAddresses(_queries.adapters), \\n            _formatAddresses(_queries.path), \\n            _queries.gasEstimate\\n        );\\n    }\\n\\n\\n    // -- QUERIES --\\n\\n\\n    /**\\n     * Query single adapter\\n     */\\n    function queryAdapter(\\n        uint256 _amountIn, \\n        address _tokenIn, \\n        address _tokenOut,\\n        uint8 _index\\n    ) external view returns (uint256) {\\n        IAdapter _adapter = IAdapter(ADAPTERS[_index]);\\n        uint amountOut = _adapter.query(_amountIn, _tokenIn, _tokenOut);\\n        return amountOut;\\n    }\\n\\n    /**\\n     * Query specified adapters\\n     */\\n    function queryNoSplit(\\n        uint256 _amountIn, \\n        address _tokenIn, \\n        address _tokenOut,\\n        uint8[] calldata _options\\n    ) public view returns (Query memory) {\\n        Query memory bestQuery;\\n        for (uint8 i; i<_options.length; i++) {\\n            address _adapter = ADAPTERS[_options[i]];\\n            uint amountOut = IAdapter(_adapter).query(\\n                _amountIn, \\n                _tokenIn, \\n                _tokenOut\\n            );\\n            if (i==0 || amountOut>bestQuery.amountOut) {\\n                bestQuery = Query(_adapter, _tokenIn, _tokenOut, amountOut);\\n            }\\n        }\\n        return bestQuery;\\n    }\\n\\n    /**\\n     * Query all adapters\\n     */\\n    function queryNoSplit(\\n        uint256 _amountIn, \\n        address _tokenIn, \\n        address _tokenOut\\n    ) public view returns (Query memory) {\\n        Query memory bestQuery;\\n        for (uint8 i; i<ADAPTERS.length; i++) {\\n            address _adapter = ADAPTERS[i];\\n            uint amountOut = IAdapter(_adapter).query(\\n                _amountIn, \\n                _tokenIn, \\n                _tokenOut\\n            );\\n            if (i==0 || amountOut>bestQuery.amountOut) {\\n                bestQuery = Query(_adapter, _tokenIn, _tokenOut, amountOut);\\n            }\\n        }\\n        return bestQuery;\\n    }\\n\\n    /**\\n     * Return path with best returns between two tokens\\n     * Takes gas-cost into account\\n     */\\n    function findBestPathWithGas(\\n        uint256 _amountIn, \\n        address _tokenIn, \\n        address _tokenOut, \\n        uint _maxSteps,\\n        uint _gasPrice,\\n        uint _tokenOutPrice\\n    ) external view returns (FormattedOfferWithGas memory) {\\n        require(_maxSteps>0 && _maxSteps<5, 'AxialRouter: Invalid max-steps');\\n        OfferWithGas memory queries;\\n        queries.amounts = BytesManipulation.toBytes(_amountIn);\\n        queries.path = BytesManipulation.toBytes(_tokenIn);\\n\\n        uint tknOutPriceNwei;\\n\\n        if(_tokenOutPrice == 0) {\\n            // Find the market price between AVAX and token-out and express gas price in token-out currency\\n            FormattedOffer memory gasQuery = findBestPath(1e18, WAVAX, _tokenOut, 2);  // Avoid low-liquidity price appreciation\\n            // Leave result nWei to preserve digits for assets with low decimal places\\n            tknOutPriceNwei = gasQuery.amounts[gasQuery.amounts.length-1].mul(_gasPrice/1e9);\\n        }\\n        else{\\n            tknOutPriceNwei = _tokenOutPrice;\\n        }\\n\\n        queries = _findBestPathWithGas(\\n            _amountIn, \\n            _tokenIn, \\n            _tokenOut, \\n            _maxSteps,\\n            queries, \\n            tknOutPriceNwei\\n        );\\n        // If no paths are found return empty struct\\n        if (queries.adapters.length==0) {\\n            queries.amounts = '';\\n            queries.path = '';\\n        }\\n        return _formatOfferWithGas(queries);\\n    } \\n\\n    function _findBestPathWithGas(\\n        uint256 _amountIn, \\n        address _tokenIn, \\n        address _tokenOut, \\n        uint _maxSteps,\\n        OfferWithGas memory _queries, \\n        uint _tknOutPriceNwei\\n    ) internal view returns (OfferWithGas memory) {\\n        OfferWithGas memory bestOption = _cloneOfferWithGas(_queries);\\n        uint256 bestAmountOut;\\n\\n        // Check if there is a path directly from tokenIn to tokenOut\\n        Query memory queryDirect = queryNoSplit(_amountIn, _tokenIn, _tokenOut);\\n        if (queryDirect.amountOut!=0) {\\n            uint gasEstimate = IAdapter(queryDirect.adapter).swapGasEstimate();\\n            _addQueryWithGas(\\n                bestOption, \\n                queryDirect.amountOut, \\n                queryDirect.adapter, \\n                queryDirect.tokenOut, \\n                gasEstimate\\n            );\\n            bestAmountOut = queryDirect.amountOut;\\n        }\\n        // Only check the rest if they would go beyond step limit (Need at least 2 more steps)\\n        if (_maxSteps>1 && _queries.adapters.length/32<=_maxSteps-2) {\\n            // Check for paths that pass through trusted tokens\\n            for (uint256 i=0; i<TRUSTED_TOKENS.length; i++) {\\n                if (_tokenIn == TRUSTED_TOKENS[i]) {\\n                    continue;\\n                }\\n                // Loop through all adapters to find the best one for swapping tokenIn for one of the trusted tokens\\n                Query memory bestSwap = queryNoSplit(_amountIn, _tokenIn, TRUSTED_TOKENS[i]);\\n                if (bestSwap.amountOut==0) {\\n                    continue;\\n                }\\n                // Explore options that connect the current path to the tokenOut\\n                OfferWithGas memory newOffer = _cloneOfferWithGas(_queries);\\n                uint gasEstimate = IAdapter(bestSwap.adapter).swapGasEstimate();\\n                _addQueryWithGas(newOffer, bestSwap.amountOut, bestSwap.adapter, bestSwap.tokenOut, gasEstimate);\\n                newOffer = _findBestPathWithGas(\\n                    bestSwap.amountOut, \\n                    TRUSTED_TOKENS[i], \\n                    _tokenOut, \\n                    _maxSteps, \\n                    newOffer, \\n                    _tknOutPriceNwei\\n                );\\n                address tokenOut = BytesManipulation.bytesToAddress(newOffer.path.length, newOffer.path);\\n                uint256 amountOut = BytesManipulation.bytesToUint256(newOffer.amounts.length, newOffer.amounts);\\n\\n                if (_tokenOut == tokenOut && bestOption.gasEstimate == 0 && newOffer.gasEstimate > 0) {\\n                    return newOffer;\\n                }\\n\\n                // Check that the last token in the path is the tokenOut and update the new best option if neccesary\\n                if (_tokenOut == tokenOut && amountOut > bestAmountOut) {\\n                    if (newOffer.gasEstimate > bestOption.gasEstimate) {\\n                        uint gasCostDiff = _tknOutPriceNwei.mul(newOffer.gasEstimate-bestOption.gasEstimate) / 1e9;\\n                        uint priceDiff = amountOut - bestAmountOut;\\n                        if (gasCostDiff > priceDiff) { continue; }\\n                    }\\n                    bestAmountOut = amountOut;\\n                    bestOption = newOffer;\\n                }\\n            }\\n        }\\n        return bestOption;   \\n    }\\n\\n    /**\\n     * Return path with best returns between two tokens\\n     */\\n    function findBestPath(\\n        uint256 _amountIn, \\n        address _tokenIn, \\n        address _tokenOut, \\n        uint _maxSteps\\n    ) public view returns (FormattedOffer memory) {\\n        require(_maxSteps>0 && _maxSteps<5, 'AxialRouter: Invalid max-steps');\\n        Offer memory queries;\\n        queries.amounts = BytesManipulation.toBytes(_amountIn);\\n        queries.path = BytesManipulation.toBytes(_tokenIn);\\n        queries = _findBestPath(_amountIn, _tokenIn, _tokenOut, _maxSteps, queries);\\n        // If no paths are found return empty struct\\n        if (queries.adapters.length==0) {\\n            queries.amounts = '';\\n            queries.path = '';\\n        }\\n        return _formatOffer(queries);\\n    } \\n\\n    function _findBestPath(\\n        uint256 _amountIn, \\n        address _tokenIn, \\n        address _tokenOut, \\n        uint _maxSteps,\\n        Offer memory _queries\\n    ) internal view returns (Offer memory) {\\n        Offer memory bestOption = _cloneOffer(_queries);\\n        uint256 bestAmountOut;\\n        // First check if there is a path directly from tokenIn to tokenOut\\n        Query memory queryDirect = queryNoSplit(_amountIn, _tokenIn, _tokenOut);\\n        if (queryDirect.amountOut!=0) {\\n            _addQuery(bestOption, queryDirect.amountOut, queryDirect.adapter, queryDirect.tokenOut);\\n            bestAmountOut = queryDirect.amountOut;\\n        }\\n        // Only check the rest if they would go beyond step limit (Need at least 2 more steps)\\n        if (_maxSteps>1 && _queries.adapters.length/32<=_maxSteps-2) {\\n            // Check for paths that pass through trusted tokens\\n            for (uint256 i=0; i<TRUSTED_TOKENS.length; i++) {\\n                if (_tokenIn == TRUSTED_TOKENS[i]) {\\n                    continue;\\n                }\\n                // Loop through all adapters to find the best one for swapping tokenIn for one of the trusted tokens\\n                Query memory bestSwap = queryNoSplit(_amountIn, _tokenIn, TRUSTED_TOKENS[i]);\\n                if (bestSwap.amountOut==0) {\\n                    continue;\\n                }\\n                // Explore options that connect the current path to the tokenOut\\n                Offer memory newOffer = _cloneOffer(_queries);\\n                _addQuery(newOffer, bestSwap.amountOut, bestSwap.adapter, bestSwap.tokenOut);\\n                newOffer = _findBestPath(\\n                    bestSwap.amountOut, \\n                    TRUSTED_TOKENS[i], \\n                    _tokenOut, \\n                    _maxSteps,\\n                    newOffer\\n                );  // Recursive step\\n                address tokenOut = BytesManipulation.bytesToAddress(newOffer.path.length, newOffer.path);\\n                uint256 amountOut = BytesManipulation.bytesToUint256(newOffer.amounts.length, newOffer.amounts);\\n                // Check that the last token in the path is the tokenOut and update the new best option if neccesary\\n                if (_tokenOut == tokenOut && amountOut>bestAmountOut) {\\n                    bestAmountOut = amountOut;\\n                    bestOption = newOffer;\\n                }\\n            }\\n        }\\n        return bestOption;   \\n    }\\n\\n\\n    // -- SWAPPERS --\\n\\n    function _swapNoSplit(\\n        Trade calldata _trade,\\n        address _from,\\n        address _to, \\n        uint _fee\\n    ) internal returns (uint) {\\n        uint[] memory amounts = new uint[](_trade.path.length);\\n        if (_fee > 0) {\\n            // Transfer fees to the claimer account and decrease initial amount\\n            amounts[0] = _applyFee(_trade.amountIn, _fee);\\n            IERC20(_trade.path[0]).safeTransferFrom(\\n                _from, \\n                FEE_CLAIMER, \\n                _trade.amountIn.sub(amounts[0])\\n            );\\n        } else {\\n            amounts[0] = _trade.amountIn;\\n        }\\n        IERC20(_trade.path[0]).safeTransferFrom(\\n            _from, \\n            _trade.adapters[0], \\n            amounts[0]\\n        );\\n        // Get amounts that will be swapped\\n        for (uint i=0; i<_trade.adapters.length; i++) {\\n            amounts[i+1] = IAdapter(_trade.adapters[i]).query(\\n                amounts[i], \\n                _trade.path[i], \\n                _trade.path[i+1]\\n            );\\n        }\\n        require(amounts[amounts.length-1] >= _trade.amountOut, 'AxialRouter: Insufficient output amount');\\n        for (uint256 i=0; i<_trade.adapters.length; i++) {\\n            // All adapters should transfer output token to the following target\\n            // All targets are the adapters, expect for the last swap where tokens are sent out\\n            address targetAddress = i<_trade.adapters.length-1 ? _trade.adapters[i+1] : _to;\\n            IAdapter(_trade.adapters[i]).swap(\\n                amounts[i], \\n                amounts[i+1], \\n                _trade.path[i], \\n                _trade.path[i+1],\\n                targetAddress\\n            );\\n        }\\n        emit AxialSwap(\\n            _trade.path[0], \\n            _trade.path[_trade.path.length-1], \\n            _trade.amountIn, \\n            amounts[amounts.length-1]\\n        );\\n        return amounts[amounts.length-1];\\n    }\\n\\n    function swapNoSplit(\\n        Trade calldata _trade,\\n        address _to,\\n        uint _fee\\n    ) public {\\n        _swapNoSplit(_trade, msg.sender, _to, _fee);\\n    }\\n\\n    function swapNoSplitFromAVAX(\\n        Trade calldata _trade,\\n        address _to,\\n        uint _fee\\n    ) external payable {\\n        require(_trade.path[0]==WAVAX, 'AxialRouter: Path needs to begin with WAVAX');\\n        _wrap(_trade.amountIn);\\n        _swapNoSplit(_trade, address(this), _to, _fee);\\n    }\\n\\n    function swapNoSplitToAVAX(\\n        Trade calldata _trade,\\n        address _to,\\n        uint _fee\\n    ) public {\\n        require(_trade.path[_trade.path.length-1]==WAVAX, 'AxialRouter: Path needs to end with WAVAX');\\n        uint returnAmount = _swapNoSplit(_trade, msg.sender, address(this), _fee);\\n        _unwrap(returnAmount);\\n        _returnTokensTo(AVAX, returnAmount, _to);\\n    }\\n\\n    /**\\n     * Swap token to token without the need to approve the first token\\n     */\\n    function swapNoSplitWithPermit(\\n        Trade calldata _trade,\\n        address _to,\\n        uint _fee,\\n        uint _deadline, \\n        uint8 _v,\\n        bytes32 _r, \\n        bytes32 _s\\n    ) external {\\n        IERC20(_trade.path[0]).permit(\\n            msg.sender, \\n            address(this), \\n            _trade.amountIn, \\n            _deadline, \\n            _v, \\n            _r, \\n            _s\\n        );\\n        swapNoSplit(_trade, _to, _fee);\\n    } \\n\\n    /**\\n     * Swap token to AVAX without the need to approve the first token\\n     */\\n    function swapNoSplitToAVAXWithPermit(\\n        Trade calldata _trade,\\n        address _to,\\n        uint _fee,\\n        uint _deadline, \\n        uint8 _v,\\n        bytes32 _r, \\n        bytes32 _s\\n    ) external {\\n        IERC20(_trade.path[0]).permit(\\n            msg.sender, \\n            address(this), \\n            _trade.amountIn, \\n            _deadline, \\n            _v, \\n            _r, \\n            _s\\n        );\\n        swapNoSplitToAVAX(_trade, _to, _fee);\\n    }\\n\\n}\",\"keccak256\":\"0x4a32fc6e1dd4e9fb42aa5b418c7b659a4c25dc7dfe325611a2b604d58a240311\",\"license\":\"GPL-3.0-only\"},\"contracts/interface/IAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface IAdapter {\\n    function name() external view returns (string memory);\\n    function swapGasEstimate() external view returns (uint);\\n    function swap(uint256, uint256, address, address, address) external;\\n    function query(uint256, address, address) external view returns (uint);\\n}\",\"keccak256\":\"0x678d86ab54027a8ef33354f4d503d6ba094c84bd206ab81ae8bf05b67f1644c4\",\"license\":\"MIT\"},\"contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface IERC20 {\\n    event Approval(address,address,uint);\\n    event Transfer(address,address,uint);\\n    function name() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function transferFrom(address,address,uint) external returns (bool);\\n    function allowance(address,address) external view returns (uint);\\n    function approve(address,uint) external returns (bool);\\n    function transfer(address,uint) external returns (bool);\\n    function balanceOf(address) external view returns (uint);\\n    function nonces(address) external view returns (uint);  // Only tokens that support permit\\n    function permit(address,address,uint256,uint256,uint8,bytes32,bytes32) external;  // Only tokens that support permit\\n    function swap(address,uint256) external;  // Only Avalanche bridge tokens \\n    function swapSupply(address) external view returns (uint);  // Only Avalanche bridge tokens \\n}\",\"keccak256\":\"0xc71d31ef4f838908478ceb97d1ba0d95c4046393bd1cf26d6079d57d7c094e8d\",\"license\":\"MIT\"},\"contracts/interface/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function withdraw(uint256 amount) external;\\n    function deposit() external payable;\\n}\",\"keccak256\":\"0xaff69efb1b24f6448740e4c71a16d86eedcd2407606ac449dd09dad5043b7923\",\"license\":\"MIT\"},\"contracts/lib/BytesManipulation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"./BytesToTypes.sol\\\";\\n\\nlibrary BytesManipulation {\\n\\n    function toBytes(uint256 x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly { mstore(add(b, 32), x) }\\n    }\\n\\n    function toBytes(address x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly { mstore(add(b, 32), x) }\\n    }\\n\\n    function mergeBytes(bytes memory a, bytes memory b) public pure returns (bytes memory c) {\\n        // From https://ethereum.stackexchange.com/a/40456\\n        uint alen = a.length;\\n        uint totallen = alen + b.length;\\n        uint loopsa = (a.length + 31) / 32;\\n        uint loopsb = (b.length + 31) / 32;\\n        assembly {\\n            let m := mload(0x40)\\n            mstore(m, totallen)\\n            for {  let i := 0 } lt(i, loopsa) { i := add(1, i) } { mstore(add(m, mul(32, add(1, i))), mload(add(a, mul(32, add(1, i))))) }\\n            for {  let i := 0 } lt(i, loopsb) { i := add(1, i) } { mstore(add(m, add(mul(32, add(1, i)), alen)), mload(add(b, mul(32, add(1, i))))) }\\n            mstore(0x40, add(m, add(32, totallen)))\\n            c := m\\n        }\\n    }\\n\\n    function bytesToAddress(uint _offst, bytes memory _input) internal pure returns (address) {\\n        return BytesToTypes.bytesToAddress(_offst, _input);\\n    }\\n\\n    function bytesToUint256(uint _offst, bytes memory _input) internal pure returns (uint256) {\\n        return BytesToTypes.bytesToUint256(_offst, _input);\\n    } \\n\\n}\\n\",\"keccak256\":\"0x2dd3d27b1467da6bde9faa266179fc76ab1935039ccfaeb0e00305cfaa019c22\",\"license\":\"MIT\"},\"contracts/lib/BytesToTypes.sol\":{\"content\":\"// From https://github.com/pouladzade/Seriality/blob/master/src/BytesToTypes.sol (Licensed under Apache2.0)\\n\\n// SPDX-License-Identifier: Apache2.0\\npragma solidity >=0.7.0;\\n\\nlibrary BytesToTypes {\\n\\n    function bytesToAddress(uint _offst, bytes memory _input) internal pure returns (address _output) {\\n        \\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint256(uint _offst, bytes memory _input) internal pure returns (uint256 _output) {\\n        \\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    } \\n}\\n\",\"keccak256\":\"0x201e23bab7751f0597b318648e00cfd72782de826c910b26f2fa199118afe85a\",\"license\":\"Apache2.0\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8b25f8514264f6d0ed4279a311d1be64012183292b1e7d6707107928dbac1142\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: Caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: New owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1331d91852367ea5319eed242ef8ebbf245a0271f2b19093f5521ae206c9a1b3\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// This is a simplified version of OpenZepplin's SafeERC20 library\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0x95e46e79b970b6e35511a773d310d63d7de30a5314e9bbfc4d8b465acec6f521\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'SafeMath: ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'SafeMath: ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'SafeMath: ds-math-mul-overflow');\\n    }\\n}\",\"keccak256\":\"0xee319854a4e682f8fab4f0404aa9604c9eea8190f6ec72c9cc67f25785b3ae01\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101ba5760003560e01c80638da5cb5b116100ec578063c3accd481161008a578063dede7f1511610064578063dede7f15146104be578063f0350382146104de578063f2fde38b146104fe578063fe38c5e61461051e576101c1565b8063c3accd4814610469578063c8a3a5c614610489578063d73792a9146104a9576101c1565b8063952e9012116100c6578063952e9012146103f0578063a3f4df7e14610410578063b59f091e14610432578063b82e16e314610447576101c1565b80638da5cb5b146103815780639140940f1461039657806392f5d88a146103c3576101c1565b8063715018a61161015957806376ebe69c1161013357806376ebe69c1461030a5780637c7a561b1461032c578063809356aa146103415780638980f11f14610361576101c1565b8063715018a6146102c057806373b295c2146102d557806375d19947146102ea576101c1565b80634c09cf4e116101955780634c09cf4e146102335780634ebb79161461026057806352a52ab0146102805780636bf2df86146102a0576101c1565b8062b99e36146101c65780631e189dc2146101f15780633a9a408114610213576101c1565b366101c157005b600080fd5b3480156101d257600080fd5b506101db610531565b6040516101e89190613009565b60405180910390f35b3480156101fd57600080fd5b5061021161020c366004612cc9565b610540565b005b34801561021f57600080fd5b5061021161022e366004612b2b565b6105ee565b34801561023f57600080fd5b5061025361024e366004612e4f565b6106b0565b6040516101e89190613423565b34801561026c57600080fd5b5061021161027b366004612d4c565b610760565b34801561028c57600080fd5b506101db61029b366004612d4c565b610867565b3480156102ac57600080fd5b506102116102bb366004612c74565b610891565b3480156102cc57600080fd5b506102116108a3565b3480156102e157600080fd5b506101db61096e565b3480156102f657600080fd5b50610211610305366004612cc9565b610986565b34801561031657600080fd5b5061031f610a2b565b6040516101e891906134ba565b34801561033857600080fd5b5061031f610a31565b34801561034d57600080fd5b5061031f61035c366004612ee9565b610a37565b34801561036d57600080fd5b5061021161037c366004612b02565b610ae4565b34801561038d57600080fd5b506101db610bd1565b3480156103a257600080fd5b506103b66103b1366004612e92565b610be0565b6040516101e891906133b4565b3480156103cf57600080fd5b506103e36103de366004612db7565b610d00565b6040516101e8919061347b565b3480156103fc57600080fd5b506101db61040b366004612d4c565b610e50565b34801561041c57600080fd5b50610425610e60565b6040516101e891906130f6565b34801561043e57600080fd5b506101db610e99565b34801561045357600080fd5b5061045c610e9e565b6040516101e891906130b5565b34801561047557600080fd5b50610211610484366004612ae8565b610f00565b34801561049557600080fd5b506102116104a4366004612b2b565b610fea565b3480156104b557600080fd5b5061031f6110a8565b3480156104ca57600080fd5b506103e36104d9366004612d7c565b6110ae565b3480156104ea57600080fd5b506102116104f9366004612c74565b6111db565b34801561050a57600080fd5b50610211610519366004612ae8565b611278565b61021161052c366004612c74565b611399565b6001546001600160a01b031681565b61054d604088018861351e565b600081811061055857fe5b905060200201602081019061056d9190612ae8565b60405163d505accf60e01b81526001600160a01b03919091169063d505accf906105a890339030908c35908a908a908a908a9060040161301d565b600060405180830381600087803b1580156105c257600080fd5b505af11580156105d6573d6000803e3d6000fd5b505050506105e58787876111db565b50505050505050565b6105f661155c565b6001600160a01b0316610607610bd1565b6001600160a01b031614610662576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b7febf7325f48e05e5e38809c69f8b02a7c907ed31d8768e6c2d841b1296a9225fe8160405161069191906130b5565b60405180910390a180516106ac9060039060208401906129b2565b5050565b6106b8612a24565b6000821180156106c85750600582105b6106ed5760405162461bcd60e51b81526004016106e490613320565b60405180910390fd5b6106f5612a24565b6106fe86611560565b815261070985611560565b604082015261071b868686868561158a565b90508060200151516000141561074d576040805160208082018352600080835291845282519081018352908152908201525b6107568161174e565b9695505050505050565b61076861155c565b6001600160a01b0316610779610bd1565b6001600160a01b0316146107d4576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600081116107f45760405162461bcd60e51b81526004016106e490613255565b604051339082156108fc029083906000818181858888f19350505050158015610821573d6000803e3d6000fd5b5060006001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa288260405161085c91906134ba565b60405180910390a250565b6002818154811061087757600080fd5b6000918252602090912001546001600160a01b0316905081565b61089d8333848461179c565b50505050565b6108ab61155c565b6001600160a01b03166108bc610bd1565b6001600160a01b031614610917576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b73b31f66aa3c1e785363f0875a1b74e27b85fd66c781565b610993604088018861351e565b600081811061099e57fe5b90506020020160208101906109b39190612ae8565b60405163d505accf60e01b81526001600160a01b03919091169063d505accf906109ee90339030908c35908a908a908a908a9060040161301d565b600060405180830381600087803b158015610a0857600080fd5b505af1158015610a1c573d6000803e3d6000fd5b505050506105e5878787610891565b60025490565b60035490565b60008060038360ff1681548110610a4a57fe5b60009182526020822001546040516377ccc49d60e11b81526001600160a01b039091169250829063ef99893a90610a89908a908a908a906004016134c3565b60206040518083038186803b158015610aa157600080fd5b505afa158015610ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad99190612d64565b979650505050505050565b610aec61155c565b6001600160a01b0316610afd610bd1565b6001600160a01b031614610b58576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60008111610b785760405162461bcd60e51b81526004016106e490613255565b610b8c6001600160a01b0383163383611d2a565b816001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2882604051610bc591906134ba565b60405180910390a25050565b6000546001600160a01b031690565b610be8612a45565b600084118015610bf85750600584105b610c145760405162461bcd60e51b81526004016106e490613320565b610c1c612a45565b610c2588611560565b8152610c3087611560565b6040820152600083610ca7576000610c67670de0b6b3a764000073b31f66aa3c1e785363f0875a1b74e27b85fd66c78a60026106b0565b9050610c9f633b9aca00878351805192909104916000198101908110610c8957fe5b6020026020010151611d4990919063ffffffff16565b915050610caa565b50825b610cb8898989898686611dbb565b915081602001515160001415610cea576040805160208082018352600080835291855282519081018352908152908301525b610cf3826120fe565b9998505050505050505050565b610d08612a6d565b610d10612a6d565b60005b60ff8116841115610e45576000600386868460ff16818110610d3157fe5b9050602002016020810190610d469190612f35565b60ff1681548110610d5357fe5b60009182526020822001546040516377ccc49d60e11b81526001600160a01b039091169250829063ef99893a90610d92908d908d908d906004016134c3565b60206040518083038186803b158015610daa57600080fd5b505afa158015610dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de29190612d64565b905060ff83161580610df75750836060015181115b15610e3b576040518060800160405280836001600160a01b031681526020018a6001600160a01b03168152602001896001600160a01b031681526020018281525093505b5050600101610d13565b509695505050505050565b6003818154811061087757600080fd5b6040518060400160405280600b81526020017f417869616c526f7574657200000000000000000000000000000000000000000081525081565b600081565b60606003805480602002602001604051908101604052809291908181526020018280548015610ef657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ed8575b5050505050905090565b610f0861155c565b6001600160a01b0316610f19610bd1565b6001600160a01b031614610f74576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001546040517fb2c853ac4d80d18d058c43d8018d077a036e542a79acae1647f5ad2a8c76f4e291610fb3916001600160a01b0390911690849061305e565b60405180910390a16001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610ff261155c565b6001600160a01b0316611003610bd1565b6001600160a01b03161461105e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b7f658ff1688002926d8f426cb10c052ec29003f50042df9652d8613484c1a586478160405161108d91906130b5565b60405180910390a180516106ac9060029060208401906129b2565b61271081565b6110b6612a6d565b6110be612a6d565b60005b60035460ff821610156111d257600060038260ff16815481106110e057fe5b60009182526020822001546040516377ccc49d60e11b81526001600160a01b039091169250829063ef99893a9061111f908b908b908b906004016134c3565b60206040518083038186803b15801561113757600080fd5b505afa15801561114b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116f9190612d64565b905060ff831615806111845750836060015181115b156111c8576040518060800160405280836001600160a01b03168152602001886001600160a01b03168152602001876001600160a01b031681526020018281525093505b50506001016110c1565b50949350505050565b73b31f66aa3c1e785363f0875a1b74e27b85fd66c76111fd604085018561351e565b600161120c604088018861351e565b90500381811061121857fe5b905060200201602081019061122d9190612ae8565b6001600160a01b0316146112535760405162461bcd60e51b81526004016106e49061313e565b60006112618433308561179c565b905061126c81612156565b61089d600082856121db565b61128061155c565b6001600160a01b0316611291610bd1565b6001600160a01b0316146112ec576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166113315760405162461bcd60e51b81526004018080602001828103825260268152602001806135bd6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b73b31f66aa3c1e785363f0875a1b74e27b85fd66c76113bb604085018561351e565b60008181106113c657fe5b90506020020160208101906113db9190612ae8565b6001600160a01b0316146114015760405162461bcd60e51b81526004016106e4906131f8565b61140b8335612249565b61089d8330848461179c565b8015806114b857506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063dd62ed3e90611466903090869060040161305e565b60206040518083038186803b15801561147e57600080fd5b505afa158015611492573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b69190612d64565b155b6114d45760405162461bcd60e51b81526004016106e490613357565b6115578363095ea7b360e01b84846040516024016114f392919061309c565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526122b4565b505050565b3390565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b611592612a24565b600061159d8361236a565b90506000806115ad8989896110ae565b905080606001516000146115db576115d383826060015183600001518460400151612396565b806060015191505b6001861180156115fd5750600286036020866020015151816115f957fe5b0411155b156117415760005b60025481101561173f576002818154811061161c57fe5b6000918252602090912001546001600160a01b038a81169116141561164057611737565b600061166e8b8b6002858154811061165457fe5b6000918252602090912001546001600160a01b03166110ae565b90508060600151600014156116835750611737565b600061168e8861236a565b90506116a881836060015184600001518560400151612396565b6116da8260600151600285815481106116bd57fe5b6000918252602090912001546001600160a01b03168c8c8561158a565b905060006116f18260400151518360400151612577565b8251805191925060009161170491612577565b9050816001600160a01b03168c6001600160a01b031614801561172657508681115b15611732578096508297505b505050505b600101611605565b505b5090979650505050505050565b611756612a24565b604051806060016040528061176e846000015161258a565b81526020016117808460200151612624565b81526020016117928460400151612624565b905290505b919050565b6000806117ac604087018761351e565b905067ffffffffffffffff811180156117c457600080fd5b506040519080825280602002602001820160405280156117ee578160200160208202803683370190505b50905082156118a3576118028635846126c3565b8160008151811061180f57fe5b60200260200101818152505061189e85600160009054906101000a90046001600160a01b03166118608460008151811061184557fe5b60200260200101518a6000013561270a90919063ffffffff16565b61186d60408b018b61351e565b600081811061187857fe5b905060200201602081019061188d9190612ae8565b6001600160a01b0316929190612762565b6118c2565b8560000135816000815181106118b557fe5b6020026020010181815250505b611918856118d3606089018961351e565b60008181106118de57fe5b90506020020160208101906118f39190612ae8565b8360008151811061190057fe5b602002602001015189806040019061186d919061351e565b60005b611928606088018861351e565b9050811015611a6d5761193e606088018861351e565b8281811061194857fe5b905060200201602081019061195d9190612ae8565b6001600160a01b031663ef99893a83838151811061197757fe5b602002602001015189806040019061198f919061351e565b8581811061199957fe5b90506020020160208101906119ae9190612ae8565b6119bb60408c018c61351e565b866001018181106119c857fe5b90506020020160208101906119dd9190612ae8565b6040518463ffffffff1660e01b81526004016119fb939291906134c3565b60206040518083038186803b158015611a1357600080fd5b505afa158015611a27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4b9190612d64565b828260010181518110611a5a57fe5b602090810291909101015260010161191b565b50856020013581600183510381518110611a8357fe5b60200260200101511015611aa95760405162461bcd60e51b81526004016106e49061319b565b60005b611ab9606088018861351e565b9050811015611c365760006001611ad360608a018a61351e565b9050038210611ae25785611b11565b611aef606089018961351e565b83600101818110611afc57fe5b9050602002016020810190611b119190612ae8565b9050611b20606089018961351e565b83818110611b2a57fe5b9050602002016020810190611b3f9190612ae8565b6001600160a01b031663eab90da6848481518110611b5957fe5b6020026020010151858560010181518110611b7057fe5b60200260200101518b8060400190611b88919061351e565b87818110611b9257fe5b9050602002016020810190611ba79190612ae8565b611bb460408e018e61351e565b88600101818110611bc157fe5b9050602002016020810190611bd69190612ae8565b866040518663ffffffff1660e01b8152600401611bf79594939291906134f0565b600060405180830381600087803b158015611c1157600080fd5b505af1158015611c25573d6000803e3d6000fd5b505060019093019250611aac915050565b50611c44604087018761351e565b6001611c5360408a018a61351e565b905003818110611c5f57fe5b9050602002016020810190611c749190612ae8565b6001600160a01b0316611c8a604088018861351e565b6000818110611c9557fe5b9050602002016020810190611caa9190612ae8565b6001600160a01b03167f8d9699a6e7210cdf594a9bc6c673a5e6ec751e57b8cbc8d9461b806d4f193bb9886000013584600186510381518110611ce957fe5b6020026020010151604051611cff9291906134e2565b60405180910390a380600182510381518110611d1757fe5b6020026020010151915050949350505050565b6115578363a9059cbb60e01b84846040516024016114f392919061309c565b6000811580611d6457505080820282828281611d6157fe5b04145b611db5576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a2064732d6d6174682d6d756c2d6f766572666c6f770000604482015290519081900360640190fd5b92915050565b611dc3612a45565b6000611dce84612783565b9050600080611dde8a8a8a6110ae565b90508060600151600014611e8757600081600001516001600160a01b03166369cff80d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e2b57600080fd5b505afa158015611e3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e639190612d64565b9050611e7e84836060015184600001518560400151856127c3565b81606001519250505b600187118015611ea9575060028703602087602001515181611ea557fe5b0411155b156120f05760005b6002548110156120ee5760028181548110611ec857fe5b6000918252602090912001546001600160a01b038b811691161415611eec576120e6565b6000611f008c8c6002858154811061165457fe5b9050806060015160001415611f1557506120e6565b6000611f2089612783565b9050600082600001516001600160a01b03166369cff80d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f6157600080fd5b505afa158015611f75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f999190612d64565b9050611fb482846060015185600001518660400151856127c3565b611fe7836060015160028681548110611fc957fe5b6000918252602090912001546001600160a01b03168e8e868e611dbb565b91506000611ffe8360400151518460400151612577565b8351805191925060009161201191612577565b9050816001600160a01b03168e6001600160a01b031614801561203657506060890151155b8015612046575060008460600151115b1561205c57839950505050505050505050610756565b816001600160a01b03168e6001600160a01b031614801561207c57508781115b156120e0578860600151846060015111156120d9576000633b9aca006120b58b606001518760600151038e611d4990919063ffffffff16565b816120bc57fe5b049050888203808211156120d657505050505050506120e6565b50505b8097508398505b50505050505b600101611eb1565b505b509098975050505050505050565b612106612a45565b604051806080016040528061211e846000015161258a565b81526020016121308460200151612624565b81526020016121428460400151612624565b815260200183606001518152509050919050565b6040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273b31f66aa3c1e785363f0875a1b74e27b85fd66c790632e1a7d4d906121a69084906004016134ba565b600060405180830381600087803b1580156121c057600080fd5b505af11580156121d4573d6000803e3d6000fd5b5050505050565b306001600160a01b03821614611557576001600160a01b038316612235576040516001600160a01b0382169083156108fc029084906000818181858888f1935050505015801561222f573d6000803e3d6000fd5b50611557565b6115576001600160a01b0384168284611d2a565b73b31f66aa3c1e785363f0875a1b74e27b85fd66c76001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561229857600080fd5b505af11580156122ac573d6000803e3d6000fd5b505050505050565b600080836001600160a01b0316836040516122cf9190612fed565b6000604051808303816000865af19150503d806000811461230c576040519150601f19603f3d011682016040523d82523d6000602084013e612311565b606091505b5091509150816123335760405162461bcd60e51b81526004016106e490613109565b80511561089d578080602001905181019061234e9190612bd3565b61089d5760405162461bcd60e51b81526004016106e4906132c3565b612372612a24565b50604080516060810182528251815260208084015190820152918101519082015290565b73__$857ff2140b64a1715bf5e031eaa4c618fa$__632f9680f585604001516123be84611560565b6040518363ffffffff1660e01b81526004016123db9291906130c8565b60006040518083038186803b1580156123f357600080fd5b505af4158015612407573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261242f9190810190612bf3565b6040850152835173__$857ff2140b64a1715bf5e031eaa4c618fa$__90632f9680f59061245b86611560565b6040518363ffffffff1660e01b81526004016124789291906130c8565b60006040518083038186803b15801561249057600080fd5b505af41580156124a4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526124cc9190810190612bf3565b8452602084015173__$857ff2140b64a1715bf5e031eaa4c618fa$__90632f9680f5906124f885611560565b6040518363ffffffff1660e01b81526004016125159291906130c8565b60006040518083038186803b15801561252d57600080fd5b505af4158015612541573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125699190810190612bf3565b846020018190525050505050565b600061258383836129ad565b9392505050565b60606000602083518161259957fe5b04905060008167ffffffffffffffff811180156125b557600080fd5b506040519080825280602002602001820160405280156125df578160200160208202803683370190505b50905060005b8281101561261c576125fd8160200260200186612577565b82828151811061260957fe5b60209081029190910101526001016125e5565b509392505050565b60606000602083518161263357fe5b04905060008167ffffffffffffffff8111801561264f57600080fd5b50604051908082528060200260200182016040528015612679578160200160208202803683370190505b50905060005b8281101561261c576126978160200260200186612577565b8282815181106126a357fe5b6001600160a01b039092166020928302919091019091015260010161267f565b60008082116126e45760405162461bcd60e51b81526004016106e49061328c565b6127106126fb6126f4828561270a565b8590611d49565b8161270257fe5b049392505050565b80820382811115611db5576040805162461bcd60e51b815260206004820152601f60248201527f536166654d6174683a2064732d6d6174682d7375622d756e646572666c6f7700604482015290519081900360640190fd5b61089d846323b872dd60e01b8585856040516024016114f393929190613078565b61278b612a45565b604051806080016040528083600001518152602001836020015181526020018360400151815260200183606001518152509050919050565b73__$857ff2140b64a1715bf5e031eaa4c618fa$__632f9680f586604001516127eb85611560565b6040518363ffffffff1660e01b81526004016128089291906130c8565b60006040518083038186803b15801561282057600080fd5b505af4158015612834573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261285c9190810190612bf3565b6040860152845173__$857ff2140b64a1715bf5e031eaa4c618fa$__90632f9680f59061288887611560565b6040518363ffffffff1660e01b81526004016128a59291906130c8565b60006040518083038186803b1580156128bd57600080fd5b505af41580156128d1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526128f99190810190612bf3565b8552602085015173__$857ff2140b64a1715bf5e031eaa4c618fa$__90632f9680f59061292586611560565b6040518363ffffffff1660e01b81526004016129429291906130c8565b60006040518083038186803b15801561295a57600080fd5b505af415801561296e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129969190810190612bf3565b602086015260609094018051909401909352505050565b015190565b828054828255906000526020600020908101928215612a14579160200282015b82811115612a14578251825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039091161782556020909201916001909101906129d2565b50612a20929150612a94565b5090565b60405180606001604052806060815260200160608152602001606081525090565b6040518060800160405280606081526020016060815260200160608152602001600081525090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b5b80821115612a205760008155600101612a95565b80356001600160a01b038116811461179757600080fd5b600060808284031215612ad1578081fd5b50919050565b803560ff8116811461179757600080fd5b600060208284031215612af9578081fd5b61258382612aa9565b60008060408385031215612b14578081fd5b612b1d83612aa9565b946020939093013593505050565b60006020808385031215612b3d578182fd5b823567ffffffffffffffff80821115612b54578384fd5b818501915085601f830112612b67578384fd5b813581811115612b7357fe5b8381029150612b8384830161356c565b8181528481019084860184860187018a1015612b9d578788fd5b8795505b83861015612bc657612bb281612aa9565b835260019590950194918601918601612ba1565b5098975050505050505050565b600060208284031215612be4578081fd5b81518015158114612583578182fd5b600060208284031215612c04578081fd5b815167ffffffffffffffff80821115612c1b578283fd5b818401915084601f830112612c2e578283fd5b815181811115612c3a57fe5b612c4d601f8201601f191660200161356c565b9150808252856020828501011115612c63578384fd5b6111d2816020840160208601613590565b600080600060608486031215612c88578081fd5b833567ffffffffffffffff811115612c9e578182fd5b612caa86828701612ac0565b935050612cb960208501612aa9565b9150604084013590509250925092565b600080600080600080600060e0888a031215612ce3578283fd5b873567ffffffffffffffff811115612cf9578384fd5b612d058a828b01612ac0565b975050612d1460208901612aa9565b95506040880135945060608801359350612d3060808901612ad7565b925060a0880135915060c0880135905092959891949750929550565b600060208284031215612d5d578081fd5b5035919050565b600060208284031215612d75578081fd5b5051919050565b600080600060608486031215612d90578283fd5b83359250612da060208501612aa9565b9150612dae60408501612aa9565b90509250925092565b600080600080600060808688031215612dce578081fd5b85359450612dde60208701612aa9565b9350612dec60408701612aa9565b9250606086013567ffffffffffffffff80821115612e08578283fd5b818801915088601f830112612e1b578283fd5b813581811115612e29578384fd5b8960208083028501011115612e3c578384fd5b9699959850939650602001949392505050565b60008060008060808587031215612e64578182fd5b84359350612e7460208601612aa9565b9250612e8260408601612aa9565b9396929550929360600135925050565b60008060008060008060c08789031215612eaa578384fd5b86359550612eba60208801612aa9565b9450612ec860408801612aa9565b9350606087013592506080870135915060a087013590509295509295509295565b60008060008060808587031215612efe578182fd5b84359350612f0e60208601612aa9565b9250612f1c60408601612aa9565b9150612f2a60608601612ad7565b905092959194509250565b600060208284031215612f46578081fd5b61258382612ad7565b6000815180845260208085019450808401835b83811015612f875781516001600160a01b031687529582019590820190600101612f62565b509495945050505050565b6000815180845260208085019450808401835b83811015612f8757815187529582019590820190600101612fa5565b60008151808452612fd9816020860160208601613590565b601f01601f19169290920160200192915050565b60008251612fff818460208701613590565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6000602082526125836020830184612f4f565b6000604082526130db6040830185612fc1565b82810360208401526130ed8185612fc1565b95945050505050565b6000602082526125836020830184612fc1565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b60208082526029908201527f417869616c526f757465723a2050617468206e6565647320746f20656e64207760408201527f6974682057415641580000000000000000000000000000000000000000000000606082015260800190565b60208082526027908201527f417869616c526f757465723a20496e73756666696369656e74206f757470757460408201527f20616d6f756e7400000000000000000000000000000000000000000000000000606082015260800190565b6020808252602b908201527f417869616c526f757465723a2050617468206e6565647320746f20626567696e60408201527f2077697468205741564158000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f417869616c526f757465723a204e6f7468696e6720746f207265636f76657200604082015260600190565b6020808252601d908201527f417869616c526f757465723a20496e73756666696369656e7420666565000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b6020808252601e908201527f417869616c526f757465723a20496e76616c6964206d61782d73746570730000604082015260600190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b6000602082528251608060208401526133d060a0840182612f92565b90506020840151601f19808584030160408601526133ee8383612f4f565b925060408601519150808584030160608601525061340c8282612f4f565b915050606084015160808401528091505092915050565b60006020825282516060602084015261343f6080840182612f92565b90506020840151601f198085840301604086015261345d8383612f4f565b92506040860151915080858403016060860152506130ed8282612f4f565b60006080820190506001600160a01b03808451168352806020850151166020840152806040850151166040840152506060830151606083015292915050565b90815260200190565b9283526001600160a01b03918216602084015216604082015260600190565b918252602082015260400190565b94855260208501939093526001600160a01b0391821660408501528116606084015216608082015260a00190565b6000808335601e19843603018112613534578283fd5b83018035915067ffffffffffffffff82111561354e578283fd5b602090810192508102360382131561356557600080fd5b9250929050565b60405181810167ffffffffffffffff8111828210171561358857fe5b604052919050565b60005b838110156135ab578181015183820152602001613593565b8381111561089d575050600091015256fe4f776e61626c653a204e6577206f776e657220697320746865207a65726f2061646472657373a26469706673582212205e47d30841b6df58dfd4afb934581dd60bdb2b5762cda09cffc6be48c598362864736f6c63430007060033",
  "libraries": {
    "BytesManipulation": "0xdd892a0b5Bcfd435489e31D8e2ec9C9B83f85977"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "findBestPath(uint256,address,address,uint256)": {
        "notice": "Return path with best returns between two tokens"
      },
      "findBestPathWithGas(uint256,address,address,uint256,uint256,uint256)": {
        "notice": "Return path with best returns between two tokens Takes gas-cost into account"
      },
      "queryAdapter(uint256,address,address,uint8)": {
        "notice": "Query single adapter"
      },
      "queryNoSplit(uint256,address,address)": {
        "notice": "Query all adapters"
      },
      "queryNoSplit(uint256,address,address,uint8[])": {
        "notice": "Query specified adapters"
      },
      "swapNoSplitToAVAXWithPermit((uint256,uint256,address[],address[]),address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Swap token to AVAX without the need to approve the first token"
      },
      "swapNoSplitWithPermit((uint256,uint256,address[],address[]),address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Swap token to token without the need to approve the first token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6598,
        "contract": "contracts/AxialRouter.sol:AxialRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 327,
        "contract": "contracts/AxialRouter.sol:AxialRouter",
        "label": "FEE_CLAIMER",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 330,
        "contract": "contracts/AxialRouter.sol:AxialRouter",
        "label": "TRUSTED_TOKENS",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 333,
        "contract": "contracts/AxialRouter.sol:AxialRouter",
        "label": "ADAPTERS",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      }
    }
  }
}